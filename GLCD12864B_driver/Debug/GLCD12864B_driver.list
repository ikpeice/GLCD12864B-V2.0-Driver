
GLCD12864B_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c90  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  08002e54  08002e54  00003e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003178  08003178  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003178  08003178  00004178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003180  08003180  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003180  08003180  00004180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003184  08003184  00004184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003188  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  20000010  08003198  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20000484  08003198  00005484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa8a  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000200a  00000000  00000000  0000faca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00011ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00002988  00000000  00000000  000126b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f1b6  00000000  00000000  00015038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ce2b2  00000000  00000000  000241ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000f24a0  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000912  00000000  00000000  000f24e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f48  00000000  00000000  000f2df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000f5d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002e3c 	.word	0x08002e3c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08002e3c 	.word	0x08002e3c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <delay_init>:

extern TIM_HandleTypeDef htim1;


void delay_init ()
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);  // change this according to ur setup
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <delay_init+0x10>)
 8000536:	f002 f969 	bl	800280c <HAL_TIM_Base_Start>
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000438 	.word	0x20000438

08000544 <delay_us>:

void delay_us (uint16_t delay)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
 800054e:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <delay_us+0x30>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2200      	movs	r2, #0
 8000554:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<delay);  // wait for the delay to complete
 8000556:	bf00      	nop
 8000558:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <delay_us+0x30>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	429a      	cmp	r2, r3
 8000562:	d3f9      	bcc.n	8000558 <delay_us+0x14>
}
 8000564:	bf00      	nop
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000438 	.word	0x20000438

08000578 <delay_ms>:

void delay_ms(uint16_t delay)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	80fb      	strh	r3, [r7, #6]
	HAL_Delay (delay);  // better use HAL_DElay in millis
 8000582:	88fb      	ldrh	r3, [r7, #6]
 8000584:	4618      	mov	r0, r3
 8000586:	f000 fffd 	bl	8001584 <HAL_Delay>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <setPixel>:
            //LCD_WriteData(left);
        }
    }
}

void setPixel(uint8_t x, uint8_t y, uint8_t color) {
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
 800059e:	460b      	mov	r3, r1
 80005a0:	71bb      	strb	r3, [r7, #6]
 80005a2:	4613      	mov	r3, r2
 80005a4:	717b      	strb	r3, [r7, #5]
    if (x >= 64 || y >= 128) return;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80005aa:	d843      	bhi.n	8000634 <setPixel+0xa0>
 80005ac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	db3f      	blt.n	8000634 <setPixel+0xa0>
    uint8_t page = y / 8;
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	08db      	lsrs	r3, r3, #3
 80005b8:	73fb      	strb	r3, [r7, #15]
    uint8_t bit  = 7 - (y % 8);  // top row is bit 7
 80005ba:	79bb      	ldrb	r3, [r7, #6]
 80005bc:	43db      	mvns	r3, r3
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	f003 0307 	and.w	r3, r3, #7
 80005c4:	73bb      	strb	r3, [r7, #14]
    if (color)
 80005c6:	797b      	ldrb	r3, [r7, #5]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d018      	beq.n	80005fe <setPixel+0x6a>
        framebuffer[x][page] |=  (1 << bit);
 80005cc:	79fa      	ldrb	r2, [r7, #7]
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	491b      	ldr	r1, [pc, #108]	@ (8000640 <setPixel+0xac>)
 80005d2:	0112      	lsls	r2, r2, #4
 80005d4:	440a      	add	r2, r1
 80005d6:	4413      	add	r3, r2
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b25a      	sxtb	r2, r3
 80005dc:	7bbb      	ldrb	r3, [r7, #14]
 80005de:	2101      	movs	r1, #1
 80005e0:	fa01 f303 	lsl.w	r3, r1, r3
 80005e4:	b25b      	sxtb	r3, r3
 80005e6:	4313      	orrs	r3, r2
 80005e8:	b259      	sxtb	r1, r3
 80005ea:	79fa      	ldrb	r2, [r7, #7]
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	b2c8      	uxtb	r0, r1
 80005f0:	4913      	ldr	r1, [pc, #76]	@ (8000640 <setPixel+0xac>)
 80005f2:	0112      	lsls	r2, r2, #4
 80005f4:	440a      	add	r2, r1
 80005f6:	4413      	add	r3, r2
 80005f8:	4602      	mov	r2, r0
 80005fa:	701a      	strb	r2, [r3, #0]
 80005fc:	e01b      	b.n	8000636 <setPixel+0xa2>
    else
        framebuffer[x][page] &= ~(1 << bit);
 80005fe:	79fa      	ldrb	r2, [r7, #7]
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	490f      	ldr	r1, [pc, #60]	@ (8000640 <setPixel+0xac>)
 8000604:	0112      	lsls	r2, r2, #4
 8000606:	440a      	add	r2, r1
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b25a      	sxtb	r2, r3
 800060e:	7bbb      	ldrb	r3, [r7, #14]
 8000610:	2101      	movs	r1, #1
 8000612:	fa01 f303 	lsl.w	r3, r1, r3
 8000616:	b25b      	sxtb	r3, r3
 8000618:	43db      	mvns	r3, r3
 800061a:	b25b      	sxtb	r3, r3
 800061c:	4013      	ands	r3, r2
 800061e:	b259      	sxtb	r1, r3
 8000620:	79fa      	ldrb	r2, [r7, #7]
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	b2c8      	uxtb	r0, r1
 8000626:	4906      	ldr	r1, [pc, #24]	@ (8000640 <setPixel+0xac>)
 8000628:	0112      	lsls	r2, r2, #4
 800062a:	440a      	add	r2, r1
 800062c:	4413      	add	r3, r2
 800062e:	4602      	mov	r2, r0
 8000630:	701a      	strb	r2, [r3, #0]
 8000632:	e000      	b.n	8000636 <setPixel+0xa2>
    if (x >= 64 || y >= 128) return;
 8000634:	bf00      	nop
}
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	2000002c 	.word	0x2000002c

08000644 <lcd_write>:
/////////////////////////////////////


//Write instruction (code==0) or data (code==1) to LCD
void lcd_write(char lcdmode, unsigned char value)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	460a      	mov	r2, r1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	4613      	mov	r3, r2
 8000652:	71bb      	strb	r3, [r7, #6]
	//DDRD = 0xFF;     //Set port for write operation
	uint8_t pin = 0x01;
 8000654:	2301      	movs	r3, #1
 8000656:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < 8; i++) {
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	e00c      	b.n	8000678 <lcd_write+0x34>
	    MX_GPIO_Pin_Mode(LCD_DATA_GPIO, pin, 0);
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	b29b      	uxth	r3, r3
 8000662:	2200      	movs	r2, #0
 8000664:	4619      	mov	r1, r3
 8000666:	4815      	ldr	r0, [pc, #84]	@ (80006bc <lcd_write+0x78>)
 8000668:	f000 fce0 	bl	800102c <MX_GPIO_Pin_Mode>
	    pin <<= 1;  // Shift left by 1 for next iteration
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < 8; i++) {
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	3301      	adds	r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	2b07      	cmp	r3, #7
 800067c:	ddef      	ble.n	800065e <lcd_write+0x1a>
	}

	set_rw(0);	     //Write operation
 800067e:	2000      	movs	r0, #0
 8000680:	f000 f81e 	bl	80006c0 <set_rw>
	set_rs(lcdmode); //0 for instruction, 1 for data
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f836 	bl	80006f8 <set_rs>
	set_e(1);
 800068c:	2001      	movs	r0, #1
 800068e:	f000 f84d 	bl	800072c <set_e>
	//PORTD = value;
	LCD_DATA_GPIO->ODR = (LCD_DATA_GPIO->ODR & 0xFF00) | value;
 8000692:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <lcd_write+0x78>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 427f 	and.w	r2, r3, #65280	@ 0xff00
 800069a:	79bb      	ldrb	r3, [r7, #6]
 800069c:	4907      	ldr	r1, [pc, #28]	@ (80006bc <lcd_write+0x78>)
 800069e:	4313      	orrs	r3, r2
 80006a0:	614b      	str	r3, [r1, #20]
    delay_us(10);
 80006a2:	200a      	movs	r0, #10
 80006a4:	f7ff ff4e 	bl	8000544 <delay_us>
	set_e(0);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 f83f 	bl	800072c <set_e>

	set_rs(0);
 80006ae:	2000      	movs	r0, #0
 80006b0:	f000 f822 	bl	80006f8 <set_rs>
}
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40020400 	.word	0x40020400

080006c0 <set_rw>:
	return value;
}

//Set RW line
void set_rw(char status)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
    if(status)
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d006      	beq.n	80006de <set_rw+0x1e>
	{
        //PORTC |= 2;
        HAL_GPIO_WritePin(LCD_RW_GPIO, LCD_RW_PIN, GPIO_PIN_SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006d6:	4807      	ldr	r0, [pc, #28]	@ (80006f4 <set_rw+0x34>)
 80006d8:	f001 fae6 	bl	8001ca8 <HAL_GPIO_WritePin>
    else
	{
	    //PORTC &= ~(2);
	    HAL_GPIO_WritePin(LCD_RW_GPIO, LCD_RW_PIN, GPIO_PIN_RESET);
	}
}
 80006dc:	e005      	b.n	80006ea <set_rw+0x2a>
	    HAL_GPIO_WritePin(LCD_RW_GPIO, LCD_RW_PIN, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006e4:	4803      	ldr	r0, [pc, #12]	@ (80006f4 <set_rw+0x34>)
 80006e6:	f001 fadf 	bl	8001ca8 <HAL_GPIO_WritePin>
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40020000 	.word	0x40020000

080006f8 <set_rs>:

//Set RS line
void set_rs(char status)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
    if(status)
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d005      	beq.n	8000714 <set_rs+0x1c>
	{
        //PORTC |= 1;
        HAL_GPIO_WritePin(LCD_RS_GPIO, LCD_RS_PIN, GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	2101      	movs	r1, #1
 800070c:	4806      	ldr	r0, [pc, #24]	@ (8000728 <set_rs+0x30>)
 800070e:	f001 facb 	bl	8001ca8 <HAL_GPIO_WritePin>
    else
	{
	    //PORTC &= ~(1);
	    HAL_GPIO_WritePin(LCD_RS_GPIO, LCD_RS_PIN, GPIO_PIN_RESET);
	}
}
 8000712:	e004      	b.n	800071e <set_rs+0x26>
	    HAL_GPIO_WritePin(LCD_RS_GPIO, LCD_RS_PIN, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	2101      	movs	r1, #1
 8000718:	4803      	ldr	r0, [pc, #12]	@ (8000728 <set_rs+0x30>)
 800071a:	f001 fac5 	bl	8001ca8 <HAL_GPIO_WritePin>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40020000 	.word	0x40020000

0800072c <set_e>:

//Set E line
void set_e(char status)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
    if(status)
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d005      	beq.n	8000748 <set_e+0x1c>
	{
        //PORTC |= 4;
        HAL_GPIO_WritePin(LCD_E_GPIO, LCD_E_PIN, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	2102      	movs	r1, #2
 8000740:	4806      	ldr	r0, [pc, #24]	@ (800075c <set_e+0x30>)
 8000742:	f001 fab1 	bl	8001ca8 <HAL_GPIO_WritePin>
    else
	{
	    //PORTC &= ~(4);
	    HAL_GPIO_WritePin(LCD_E_GPIO, LCD_E_PIN, GPIO_PIN_RESET);
	}
}
 8000746:	e004      	b.n	8000752 <set_e+0x26>
	    HAL_GPIO_WritePin(LCD_E_GPIO, LCD_E_PIN, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2102      	movs	r1, #2
 800074c:	4803      	ldr	r0, [pc, #12]	@ (800075c <set_e+0x30>)
 800074e:	f001 faab 	bl	8001ca8 <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40020000 	.word	0x40020000

08000760 <lcd_cls>:
	}
}

//Clear LCD
void lcd_cls(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
	int x, y,x1;
    for(x = 0; x < 64; x++)
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	e048      	b.n	80007fe <lcd_cls+0x9e>
    {
		for(y = 0; y < 16; y++)
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	e03f      	b.n	80007f2 <lcd_cls+0x92>
		{
			if(x > 31)  //Enter lower part of screen => go to next page
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2b1f      	cmp	r3, #31
 8000776:	dd1d      	ble.n	80007b4 <lcd_cls+0x54>
			{
		        x1 = x % 32;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	425a      	negs	r2, r3
 800077c:	f003 031f 	and.w	r3, r3, #31
 8000780:	f002 021f 	and.w	r2, r2, #31
 8000784:	bf58      	it	pl
 8000786:	4253      	negpl	r3, r2
 8000788:	607b      	str	r3, [r7, #4]
		        //y |= 8;
				//Set address
	            lcd_write(LCD_CMD_MODE, 0x80 | x1);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	b25b      	sxtb	r3, r3
 800078e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000792:	b25b      	sxtb	r3, r3
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4619      	mov	r1, r3
 8000798:	2000      	movs	r0, #0
 800079a:	f7ff ff53 	bl	8000644 <lcd_write>
	            lcd_write(LCD_CMD_MODE, 0x80 | y);
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007a6:	b25b      	sxtb	r3, r3
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	4619      	mov	r1, r3
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff ff49 	bl	8000644 <lcd_write>
 80007b2:	e013      	b.n	80007dc <lcd_cls+0x7c>
		    }
			else{
				//Set address
	            lcd_write(LCD_CMD_MODE, 0x80 | x);
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007bc:	b25b      	sxtb	r3, r3
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4619      	mov	r1, r3
 80007c2:	2000      	movs	r0, #0
 80007c4:	f7ff ff3e 	bl	8000644 <lcd_write>
	            lcd_write(LCD_CMD_MODE, 0x80 | y);
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007d0:	b25b      	sxtb	r3, r3
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	4619      	mov	r1, r3
 80007d6:	2000      	movs	r0, #0
 80007d8:	f7ff ff34 	bl	8000644 <lcd_write>
			}


            //Write data
            lcd_write(LCD_DATA_MODE, 0);
 80007dc:	2100      	movs	r1, #0
 80007de:	2001      	movs	r0, #1
 80007e0:	f7ff ff30 	bl	8000644 <lcd_write>
            lcd_write(LCD_DATA_MODE, 0);
 80007e4:	2100      	movs	r1, #0
 80007e6:	2001      	movs	r0, #1
 80007e8:	f7ff ff2c 	bl	8000644 <lcd_write>
		for(y = 0; y < 16; y++)
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	3301      	adds	r3, #1
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	2b0f      	cmp	r3, #15
 80007f6:	ddbc      	ble.n	8000772 <lcd_cls+0x12>
    for(x = 0; x < 64; x++)
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3301      	adds	r3, #1
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2b3f      	cmp	r3, #63	@ 0x3f
 8000802:	ddb3      	ble.n	800076c <lcd_cls+0xc>
        }
    }
}
 8000804:	bf00      	nop
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <lcd_init>:



//Init LCD
void lcd_init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
    //Reset
    //PORTC &= ~(8);
    HAL_GPIO_WritePin(LCD_RST_GPIO, LCD_RST_PIN, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800081a:	481f      	ldr	r0, [pc, #124]	@ (8000898 <lcd_init+0x88>)
 800081c:	f001 fa44 	bl	8001ca8 <HAL_GPIO_WritePin>
    delay_ms(1);
 8000820:	2001      	movs	r0, #1
 8000822:	f7ff fea9 	bl	8000578 <delay_ms>
    //PORTC |= 8;
    HAL_GPIO_WritePin(LCD_RST_GPIO, LCD_RST_PIN, GPIO_PIN_SET);
 8000826:	2201      	movs	r2, #1
 8000828:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800082c:	481a      	ldr	r0, [pc, #104]	@ (8000898 <lcd_init+0x88>)
 800082e:	f001 fa3b 	bl	8001ca8 <HAL_GPIO_WritePin>
    delay_ms(40);
 8000832:	2028      	movs	r0, #40	@ 0x28
 8000834:	f7ff fea0 	bl	8000578 <delay_ms>

    lcd_write(LCD_CMD_MODE, 0x30);	//Use 8-bit mode parallel
 8000838:	2130      	movs	r1, #48	@ 0x30
 800083a:	2000      	movs	r0, #0
 800083c:	f7ff ff02 	bl	8000644 <lcd_write>
    delay_ms(1);
 8000840:	2001      	movs	r0, #1
 8000842:	f7ff fe99 	bl	8000578 <delay_ms>

    lcd_write(LCD_CMD_MODE, 0x0C); //All on Cursor on, Blink on , Display on
 8000846:	210c      	movs	r1, #12
 8000848:	2000      	movs	r0, #0
 800084a:	f7ff fefb 	bl	8000644 <lcd_write>
    delay_ms(1);
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff fe92 	bl	8000578 <delay_ms>

    lcd_write(LCD_CMD_MODE, 0x01); //Perform CLS in text mode to eliminate random chars from screen
 8000854:	2101      	movs	r1, #1
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff fef4 	bl	8000644 <lcd_write>
    delay_ms(20);
 800085c:	2014      	movs	r0, #20
 800085e:	f7ff fe8b 	bl	8000578 <delay_ms>

    lcd_write(LCD_CMD_MODE, 0x34); //Switch to extended mode, redefine function set
 8000862:	2134      	movs	r1, #52	@ 0x34
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff feed 	bl	8000644 <lcd_write>
    delay_us(1000);
 800086a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800086e:	f7ff fe69 	bl	8000544 <delay_us>

    lcd_write(LCD_CMD_MODE, 0x36); //Add graphic mode
 8000872:	2136      	movs	r1, #54	@ 0x36
 8000874:	2000      	movs	r0, #0
 8000876:	f7ff fee5 	bl	8000644 <lcd_write>
    delay_us(1000);
 800087a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800087e:	f7ff fe61 	bl	8000544 <delay_us>

    lcd_write(LCD_CMD_MODE, 0x12); //Display control and display ON
 8000882:	2112      	movs	r1, #18
 8000884:	2000      	movs	r0, #0
 8000886:	f7ff fedd 	bl	8000644 <lcd_write>
    delay_us(1000);
 800088a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800088e:	f7ff fe59 	bl	8000544 <delay_us>
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40020000 	.word	0x40020000

0800089c <lcd_draw_pointer>:
            lcd_write(LCD_DATA_MODE, ch1);
    	}
    }
}

void lcd_draw_pointer(uint8_t new_x, uint8_t new_y) {
 800089c:	b5b0      	push	{r4, r5, r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	460a      	mov	r2, r1
 80008a6:	71fb      	strb	r3, [r7, #7]
 80008a8:	4613      	mov	r3, r2
 80008aa:	71bb      	strb	r3, [r7, #6]
	static uint8_t prev_x = 9;
	static uint8_t prev_y = 0;
	static uint8_t prev_buff[1][7]={0};

	if(new_x > 57)new_x = 57;
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	2b39      	cmp	r3, #57	@ 0x39
 80008b0:	d901      	bls.n	80008b6 <lcd_draw_pointer+0x1a>
 80008b2:	2339      	movs	r3, #57	@ 0x39
 80008b4:	71fb      	strb	r3, [r7, #7]
	if(new_y > 15)new_y = 15;
 80008b6:	79bb      	ldrb	r3, [r7, #6]
 80008b8:	2b0f      	cmp	r3, #15
 80008ba:	d901      	bls.n	80008c0 <lcd_draw_pointer+0x24>
 80008bc:	230f      	movs	r3, #15
 80008be:	71bb      	strb	r3, [r7, #6]


    for (uint8_t row = 0; row < 7; row++) {
 80008c0:	2300      	movs	r3, #0
 80008c2:	77fb      	strb	r3, [r7, #31]
 80008c4:	e024      	b.n	8000910 <lcd_draw_pointer+0x74>
    	for(int col = 0; col < 1; col++){
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
 80008ca:	e01b      	b.n	8000904 <lcd_draw_pointer+0x68>
        	framebuffer[prev_x + row][prev_y + col] = prev_buff[col][row];
 80008cc:	7ffc      	ldrb	r4, [r7, #31]
 80008ce:	4b3f      	ldr	r3, [pc, #252]	@ (80009cc <lcd_draw_pointer+0x130>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	461a      	mov	r2, r3
 80008d4:	7ffb      	ldrb	r3, [r7, #31]
 80008d6:	18d0      	adds	r0, r2, r3
 80008d8:	4b3d      	ldr	r3, [pc, #244]	@ (80009d0 <lcd_draw_pointer+0x134>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	69bb      	ldr	r3, [r7, #24]
 80008e0:	18d1      	adds	r1, r2, r3
 80008e2:	4d3c      	ldr	r5, [pc, #240]	@ (80009d4 <lcd_draw_pointer+0x138>)
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	4613      	mov	r3, r2
 80008e8:	00db      	lsls	r3, r3, #3
 80008ea:	1a9b      	subs	r3, r3, r2
 80008ec:	442b      	add	r3, r5
 80008ee:	4423      	add	r3, r4
 80008f0:	781c      	ldrb	r4, [r3, #0]
 80008f2:	4a39      	ldr	r2, [pc, #228]	@ (80009d8 <lcd_draw_pointer+0x13c>)
 80008f4:	0103      	lsls	r3, r0, #4
 80008f6:	4413      	add	r3, r2
 80008f8:	440b      	add	r3, r1
 80008fa:	4622      	mov	r2, r4
 80008fc:	701a      	strb	r2, [r3, #0]
    	for(int col = 0; col < 1; col++){
 80008fe:	69bb      	ldr	r3, [r7, #24]
 8000900:	3301      	adds	r3, #1
 8000902:	61bb      	str	r3, [r7, #24]
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	2b00      	cmp	r3, #0
 8000908:	dde0      	ble.n	80008cc <lcd_draw_pointer+0x30>
    for (uint8_t row = 0; row < 7; row++) {
 800090a:	7ffb      	ldrb	r3, [r7, #31]
 800090c:	3301      	adds	r3, #1
 800090e:	77fb      	strb	r3, [r7, #31]
 8000910:	7ffb      	ldrb	r3, [r7, #31]
 8000912:	2b06      	cmp	r3, #6
 8000914:	d9d7      	bls.n	80008c6 <lcd_draw_pointer+0x2a>
    	}
    }

    for (uint8_t row = 0; row < 7; row++) {
 8000916:	2300      	movs	r3, #0
 8000918:	75fb      	strb	r3, [r7, #23]
 800091a:	e020      	b.n	800095e <lcd_draw_pointer+0xc2>
    	for(int col = 0; col < 1; col++){
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	e017      	b.n	8000952 <lcd_draw_pointer+0xb6>
        	prev_buff[col][row] = framebuffer[new_x + row][new_y + col];
 8000922:	79fa      	ldrb	r2, [r7, #7]
 8000924:	7dfb      	ldrb	r3, [r7, #23]
 8000926:	441a      	add	r2, r3
 8000928:	79b9      	ldrb	r1, [r7, #6]
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	440b      	add	r3, r1
 800092e:	7df9      	ldrb	r1, [r7, #23]
 8000930:	4829      	ldr	r0, [pc, #164]	@ (80009d8 <lcd_draw_pointer+0x13c>)
 8000932:	0112      	lsls	r2, r2, #4
 8000934:	4402      	add	r2, r0
 8000936:	4413      	add	r3, r2
 8000938:	781c      	ldrb	r4, [r3, #0]
 800093a:	4826      	ldr	r0, [pc, #152]	@ (80009d4 <lcd_draw_pointer+0x138>)
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	4613      	mov	r3, r2
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	1a9b      	subs	r3, r3, r2
 8000944:	4403      	add	r3, r0
 8000946:	440b      	add	r3, r1
 8000948:	4622      	mov	r2, r4
 800094a:	701a      	strb	r2, [r3, #0]
    	for(int col = 0; col < 1; col++){
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	3301      	adds	r3, #1
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	2b00      	cmp	r3, #0
 8000956:	dde4      	ble.n	8000922 <lcd_draw_pointer+0x86>
    for (uint8_t row = 0; row < 7; row++) {
 8000958:	7dfb      	ldrb	r3, [r7, #23]
 800095a:	3301      	adds	r3, #1
 800095c:	75fb      	strb	r3, [r7, #23]
 800095e:	7dfb      	ldrb	r3, [r7, #23]
 8000960:	2b06      	cmp	r3, #6
 8000962:	d9db      	bls.n	800091c <lcd_draw_pointer+0x80>
    	}
    }

    for (uint8_t row = 0; row < 7; row++) {
 8000964:	2300      	movs	r3, #0
 8000966:	73fb      	strb	r3, [r7, #15]
 8000968:	e020      	b.n	80009ac <lcd_draw_pointer+0x110>
    	for(int col = 0; col < 1; col++){
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	e017      	b.n	80009a0 <lcd_draw_pointer+0x104>
    		framebuffer[new_x + row][new_y + col] = pointer_bitmap[col][row];
 8000970:	7bfc      	ldrb	r4, [r7, #15]
 8000972:	79fa      	ldrb	r2, [r7, #7]
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	18d0      	adds	r0, r2, r3
 8000978:	79ba      	ldrb	r2, [r7, #6]
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	18d1      	adds	r1, r2, r3
 800097e:	4d17      	ldr	r5, [pc, #92]	@ (80009dc <lcd_draw_pointer+0x140>)
 8000980:	68ba      	ldr	r2, [r7, #8]
 8000982:	4613      	mov	r3, r2
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	1a9b      	subs	r3, r3, r2
 8000988:	442b      	add	r3, r5
 800098a:	4423      	add	r3, r4
 800098c:	781c      	ldrb	r4, [r3, #0]
 800098e:	4a12      	ldr	r2, [pc, #72]	@ (80009d8 <lcd_draw_pointer+0x13c>)
 8000990:	0103      	lsls	r3, r0, #4
 8000992:	4413      	add	r3, r2
 8000994:	440b      	add	r3, r1
 8000996:	4622      	mov	r2, r4
 8000998:	701a      	strb	r2, [r3, #0]
    	for(int col = 0; col < 1; col++){
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	3301      	adds	r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	dde4      	ble.n	8000970 <lcd_draw_pointer+0xd4>
    for (uint8_t row = 0; row < 7; row++) {
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	3301      	adds	r3, #1
 80009aa:	73fb      	strb	r3, [r7, #15]
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	2b06      	cmp	r3, #6
 80009b0:	d9db      	bls.n	800096a <lcd_draw_pointer+0xce>
    	}
    }
	    lcd_update();
 80009b2:	f000 f9fd 	bl	8000db0 <lcd_update>
    prev_x = new_x;
 80009b6:	4a05      	ldr	r2, [pc, #20]	@ (80009cc <lcd_draw_pointer+0x130>)
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	7013      	strb	r3, [r2, #0]
    prev_y = new_y;
 80009bc:	4a04      	ldr	r2, [pc, #16]	@ (80009d0 <lcd_draw_pointer+0x134>)
 80009be:	79bb      	ldrb	r3, [r7, #6]
 80009c0:	7013      	strb	r3, [r2, #0]
}
 80009c2:	bf00      	nop
 80009c4:	3720      	adds	r7, #32
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bdb0      	pop	{r4, r5, r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000000 	.word	0x20000000
 80009d0:	2000042c 	.word	0x2000042c
 80009d4:	20000430 	.word	0x20000430
 80009d8:	2000002c 	.word	0x2000002c
 80009dc:	08002ec4 	.word	0x08002ec4

080009e0 <lcd_draw_topbar>:

void lcd_draw_topbar(void){
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
    for (uint8_t row = 0; row < 7; row++) {
 80009e6:	2300      	movs	r3, #0
 80009e8:	71fb      	strb	r3, [r7, #7]
 80009ea:	e05c      	b.n	8000aa6 <lcd_draw_topbar+0xc6>
        for (uint8_t col = 0; col < 39; col++) {
 80009ec:	2300      	movs	r3, #0
 80009ee:	71bb      	strb	r3, [r7, #6]
 80009f0:	e053      	b.n	8000a9a <lcd_draw_topbar+0xba>
            uint8_t byte = col / 8;
 80009f2:	79bb      	ldrb	r3, [r7, #6]
 80009f4:	08db      	lsrs	r3, r3, #3
 80009f6:	717b      	strb	r3, [r7, #5]
            uint8_t bit = 7 - (col % 8);
 80009f8:	79bb      	ldrb	r3, [r7, #6]
 80009fa:	43db      	mvns	r3, r3
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	713b      	strb	r3, [r7, #4]

            // Read corresponding bit from miriair_bitmap
            uint8_t src_byte = miriair_bitmap[row][byte];
 8000a04:	79fa      	ldrb	r2, [r7, #7]
 8000a06:	7979      	ldrb	r1, [r7, #5]
 8000a08:	482c      	ldr	r0, [pc, #176]	@ (8000abc <lcd_draw_topbar+0xdc>)
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	4403      	add	r3, r0
 8000a12:	440b      	add	r3, r1
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	70fb      	strb	r3, [r7, #3]
            uint8_t bit_val = (src_byte >> bit) & 0x01;
 8000a18:	78fa      	ldrb	r2, [r7, #3]
 8000a1a:	793b      	ldrb	r3, [r7, #4]
 8000a1c:	fa42 f303 	asr.w	r3, r2, r3
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	70bb      	strb	r3, [r7, #2]

            if (bit_val)
 8000a28:	78bb      	ldrb	r3, [r7, #2]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d018      	beq.n	8000a60 <lcd_draw_topbar+0x80>
                framebuffer[row][byte] |=  (1 << bit);
 8000a2e:	79fa      	ldrb	r2, [r7, #7]
 8000a30:	797b      	ldrb	r3, [r7, #5]
 8000a32:	4923      	ldr	r1, [pc, #140]	@ (8000ac0 <lcd_draw_topbar+0xe0>)
 8000a34:	0112      	lsls	r2, r2, #4
 8000a36:	440a      	add	r2, r1
 8000a38:	4413      	add	r3, r2
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b25a      	sxtb	r2, r3
 8000a3e:	793b      	ldrb	r3, [r7, #4]
 8000a40:	2101      	movs	r1, #1
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	b25b      	sxtb	r3, r3
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	b259      	sxtb	r1, r3
 8000a4c:	79fa      	ldrb	r2, [r7, #7]
 8000a4e:	797b      	ldrb	r3, [r7, #5]
 8000a50:	b2c8      	uxtb	r0, r1
 8000a52:	491b      	ldr	r1, [pc, #108]	@ (8000ac0 <lcd_draw_topbar+0xe0>)
 8000a54:	0112      	lsls	r2, r2, #4
 8000a56:	440a      	add	r2, r1
 8000a58:	4413      	add	r3, r2
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	701a      	strb	r2, [r3, #0]
 8000a5e:	e019      	b.n	8000a94 <lcd_draw_topbar+0xb4>
            else
                framebuffer[row][byte] &= ~(1 << bit);
 8000a60:	79fa      	ldrb	r2, [r7, #7]
 8000a62:	797b      	ldrb	r3, [r7, #5]
 8000a64:	4916      	ldr	r1, [pc, #88]	@ (8000ac0 <lcd_draw_topbar+0xe0>)
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	440a      	add	r2, r1
 8000a6a:	4413      	add	r3, r2
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	b25a      	sxtb	r2, r3
 8000a70:	793b      	ldrb	r3, [r7, #4]
 8000a72:	2101      	movs	r1, #1
 8000a74:	fa01 f303 	lsl.w	r3, r1, r3
 8000a78:	b25b      	sxtb	r3, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	b25b      	sxtb	r3, r3
 8000a7e:	4013      	ands	r3, r2
 8000a80:	b259      	sxtb	r1, r3
 8000a82:	79fa      	ldrb	r2, [r7, #7]
 8000a84:	797b      	ldrb	r3, [r7, #5]
 8000a86:	b2c8      	uxtb	r0, r1
 8000a88:	490d      	ldr	r1, [pc, #52]	@ (8000ac0 <lcd_draw_topbar+0xe0>)
 8000a8a:	0112      	lsls	r2, r2, #4
 8000a8c:	440a      	add	r2, r1
 8000a8e:	4413      	add	r3, r2
 8000a90:	4602      	mov	r2, r0
 8000a92:	701a      	strb	r2, [r3, #0]
        for (uint8_t col = 0; col < 39; col++) {
 8000a94:	79bb      	ldrb	r3, [r7, #6]
 8000a96:	3301      	adds	r3, #1
 8000a98:	71bb      	strb	r3, [r7, #6]
 8000a9a:	79bb      	ldrb	r3, [r7, #6]
 8000a9c:	2b26      	cmp	r3, #38	@ 0x26
 8000a9e:	d9a8      	bls.n	80009f2 <lcd_draw_topbar+0x12>
    for (uint8_t row = 0; row < 7; row++) {
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	71fb      	strb	r3, [r7, #7]
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	2b06      	cmp	r3, #6
 8000aaa:	d99f      	bls.n	80009ec <lcd_draw_topbar+0xc>
        }
    }
}
 8000aac:	bf00      	nop
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	08002ea0 	.word	0x08002ea0
 8000ac0:	2000002c 	.word	0x2000002c

08000ac4 <lcd_draw_H_line>:

void lcd_draw_H_line(uint8_t x, uint8_t y, uint8_t lenght){
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	71bb      	strb	r3, [r7, #6]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	717b      	strb	r3, [r7, #5]
	for(int col = y; col < lenght; col++){
 8000ad6:	79bb      	ldrb	r3, [r7, #6]
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	e02f      	b.n	8000b3c <lcd_draw_H_line+0x78>
		if(col==128)break;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2b80      	cmp	r3, #128	@ 0x80
 8000ae0:	d031      	beq.n	8000b46 <lcd_draw_H_line+0x82>
		uint8_t page = col / 8;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	da00      	bge.n	8000aea <lcd_draw_H_line+0x26>
 8000ae8:	3307      	adds	r3, #7
 8000aea:	10db      	asrs	r3, r3, #3
 8000aec:	72fb      	strb	r3, [r7, #11]
		uint8_t bit = 7 - (col % 8);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	425a      	negs	r2, r3
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	f002 0207 	and.w	r2, r2, #7
 8000afa:	bf58      	it	pl
 8000afc:	4253      	negpl	r3, r2
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	f1c3 0307 	rsb	r3, r3, #7
 8000b04:	72bb      	strb	r3, [r7, #10]
		framebuffer[ x][page] |= (0x01 << bit);
 8000b06:	79fa      	ldrb	r2, [r7, #7]
 8000b08:	7afb      	ldrb	r3, [r7, #11]
 8000b0a:	4912      	ldr	r1, [pc, #72]	@ (8000b54 <lcd_draw_H_line+0x90>)
 8000b0c:	0112      	lsls	r2, r2, #4
 8000b0e:	440a      	add	r2, r1
 8000b10:	4413      	add	r3, r2
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	b25a      	sxtb	r2, r3
 8000b16:	7abb      	ldrb	r3, [r7, #10]
 8000b18:	2101      	movs	r1, #1
 8000b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1e:	b25b      	sxtb	r3, r3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	b259      	sxtb	r1, r3
 8000b24:	79fa      	ldrb	r2, [r7, #7]
 8000b26:	7afb      	ldrb	r3, [r7, #11]
 8000b28:	b2c8      	uxtb	r0, r1
 8000b2a:	490a      	ldr	r1, [pc, #40]	@ (8000b54 <lcd_draw_H_line+0x90>)
 8000b2c:	0112      	lsls	r2, r2, #4
 8000b2e:	440a      	add	r2, r1
 8000b30:	4413      	add	r3, r2
 8000b32:	4602      	mov	r2, r0
 8000b34:	701a      	strb	r2, [r3, #0]
	for(int col = y; col < lenght; col++){
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	797b      	ldrb	r3, [r7, #5]
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	dbcb      	blt.n	8000adc <lcd_draw_H_line+0x18>
	}
}
 8000b44:	e000      	b.n	8000b48 <lcd_draw_H_line+0x84>
		if(col==128)break;
 8000b46:	bf00      	nop
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	2000002c 	.word	0x2000002c

08000b58 <lcd_draw_V_line>:

void lcd_draw_V_line(uint8_t x, uint8_t y, uint8_t lenght){
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
 8000b62:	460b      	mov	r3, r1
 8000b64:	71bb      	strb	r3, [r7, #6]
 8000b66:	4613      	mov	r3, r2
 8000b68:	717b      	strb	r3, [r7, #5]
	uint8_t page = y / 8;
 8000b6a:	79bb      	ldrb	r3, [r7, #6]
 8000b6c:	08db      	lsrs	r3, r3, #3
 8000b6e:	73bb      	strb	r3, [r7, #14]
	uint8_t bit = 7 - (y % 8);
 8000b70:	79bb      	ldrb	r3, [r7, #6]
 8000b72:	43db      	mvns	r3, r3
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	737b      	strb	r3, [r7, #13]
    for (uint8_t row = x; row < lenght; row++) {
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	73fb      	strb	r3, [r7, #15]
 8000b80:	e01d      	b.n	8000bbe <lcd_draw_V_line+0x66>
    	if(x==64)break;
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b40      	cmp	r3, #64	@ 0x40
 8000b86:	d01f      	beq.n	8000bc8 <lcd_draw_V_line+0x70>
    	framebuffer[ row][page] |= (0x01 << bit);
 8000b88:	7bfa      	ldrb	r2, [r7, #15]
 8000b8a:	7bbb      	ldrb	r3, [r7, #14]
 8000b8c:	4912      	ldr	r1, [pc, #72]	@ (8000bd8 <lcd_draw_V_line+0x80>)
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	440a      	add	r2, r1
 8000b92:	4413      	add	r3, r2
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b25a      	sxtb	r2, r3
 8000b98:	7b7b      	ldrb	r3, [r7, #13]
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba0:	b25b      	sxtb	r3, r3
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	b259      	sxtb	r1, r3
 8000ba6:	7bfa      	ldrb	r2, [r7, #15]
 8000ba8:	7bbb      	ldrb	r3, [r7, #14]
 8000baa:	b2c8      	uxtb	r0, r1
 8000bac:	490a      	ldr	r1, [pc, #40]	@ (8000bd8 <lcd_draw_V_line+0x80>)
 8000bae:	0112      	lsls	r2, r2, #4
 8000bb0:	440a      	add	r2, r1
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	701a      	strb	r2, [r3, #0]
    for (uint8_t row = x; row < lenght; row++) {
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	7bfa      	ldrb	r2, [r7, #15]
 8000bc0:	797b      	ldrb	r3, [r7, #5]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d3dd      	bcc.n	8000b82 <lcd_draw_V_line+0x2a>
    }
}
 8000bc6:	e000      	b.n	8000bca <lcd_draw_V_line+0x72>
    	if(x==64)break;
 8000bc8:	bf00      	nop
}
 8000bca:	bf00      	nop
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	2000002c 	.word	0x2000002c

08000bdc <lcd_draw_signalStrenght>:

void lcd_draw_signalStrenght(uint8_t value){
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]

	uint8_t page = 15;
 8000be6:	230f      	movs	r3, #15
 8000be8:	733b      	strb	r3, [r7, #12]
	uint8_t y = 121;
 8000bea:	2379      	movs	r3, #121	@ 0x79
 8000bec:	73fb      	strb	r3, [r7, #15]
	uint8_t num_bars = 7- (value/14);
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	085b      	lsrs	r3, r3, #1
 8000bf2:	4a31      	ldr	r2, [pc, #196]	@ (8000cb8 <lcd_draw_signalStrenght+0xdc>)
 8000bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf8:	089b      	lsrs	r3, r3, #2
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	f1c3 0307 	rsb	r3, r3, #7
 8000c00:	72fb      	strb	r3, [r7, #11]

    for(uint8_t row = 6; row >= 0; row--) {
 8000c02:	2306      	movs	r3, #6
 8000c04:	73bb      	strb	r3, [r7, #14]
    	for(uint8_t col = y; col < 128; col++){
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
 8000c08:	737b      	strb	r3, [r7, #13]
 8000c0a:	e03f      	b.n	8000c8c <lcd_draw_signalStrenght+0xb0>
    		uint8_t bit = 7 - (col % 8);
 8000c0c:	7b7b      	ldrb	r3, [r7, #13]
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	72bb      	strb	r3, [r7, #10]
    		if(bit < num_bars){
 8000c18:	7aba      	ldrb	r2, [r7, #10]
 8000c1a:	7afb      	ldrb	r3, [r7, #11]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d21a      	bcs.n	8000c56 <lcd_draw_signalStrenght+0x7a>
    			framebuffer[ row][page] &= ~(0x01 << bit); // clear the bit
 8000c20:	7bba      	ldrb	r2, [r7, #14]
 8000c22:	7b3b      	ldrb	r3, [r7, #12]
 8000c24:	4925      	ldr	r1, [pc, #148]	@ (8000cbc <lcd_draw_signalStrenght+0xe0>)
 8000c26:	0112      	lsls	r2, r2, #4
 8000c28:	440a      	add	r2, r1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b25a      	sxtb	r2, r3
 8000c30:	7abb      	ldrb	r3, [r7, #10]
 8000c32:	2101      	movs	r1, #1
 8000c34:	fa01 f303 	lsl.w	r3, r1, r3
 8000c38:	b25b      	sxtb	r3, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	b25b      	sxtb	r3, r3
 8000c3e:	4013      	ands	r3, r2
 8000c40:	b259      	sxtb	r1, r3
 8000c42:	7bba      	ldrb	r2, [r7, #14]
 8000c44:	7b3b      	ldrb	r3, [r7, #12]
 8000c46:	b2c8      	uxtb	r0, r1
 8000c48:	491c      	ldr	r1, [pc, #112]	@ (8000cbc <lcd_draw_signalStrenght+0xe0>)
 8000c4a:	0112      	lsls	r2, r2, #4
 8000c4c:	440a      	add	r2, r1
 8000c4e:	4413      	add	r3, r2
 8000c50:	4602      	mov	r2, r0
 8000c52:	701a      	strb	r2, [r3, #0]
 8000c54:	e017      	b.n	8000c86 <lcd_draw_signalStrenght+0xaa>
    		}
    		else{

    			framebuffer[ row][page] |= (0x01 << bit); // set the bit
 8000c56:	7bba      	ldrb	r2, [r7, #14]
 8000c58:	7b3b      	ldrb	r3, [r7, #12]
 8000c5a:	4918      	ldr	r1, [pc, #96]	@ (8000cbc <lcd_draw_signalStrenght+0xe0>)
 8000c5c:	0112      	lsls	r2, r2, #4
 8000c5e:	440a      	add	r2, r1
 8000c60:	4413      	add	r3, r2
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b25a      	sxtb	r2, r3
 8000c66:	7abb      	ldrb	r3, [r7, #10]
 8000c68:	2101      	movs	r1, #1
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	b25b      	sxtb	r3, r3
 8000c70:	4313      	orrs	r3, r2
 8000c72:	b259      	sxtb	r1, r3
 8000c74:	7bba      	ldrb	r2, [r7, #14]
 8000c76:	7b3b      	ldrb	r3, [r7, #12]
 8000c78:	b2c8      	uxtb	r0, r1
 8000c7a:	4910      	ldr	r1, [pc, #64]	@ (8000cbc <lcd_draw_signalStrenght+0xe0>)
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	440a      	add	r2, r1
 8000c80:	4413      	add	r3, r2
 8000c82:	4602      	mov	r2, r0
 8000c84:	701a      	strb	r2, [r3, #0]
    	for(uint8_t col = y; col < 128; col++){
 8000c86:	7b7b      	ldrb	r3, [r7, #13]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	737b      	strb	r3, [r7, #13]
 8000c8c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	dabb      	bge.n	8000c0c <lcd_draw_signalStrenght+0x30>
    		}
    		//lcd_update();
    	}
    	if(row==0)break;
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d006      	beq.n	8000ca8 <lcd_draw_signalStrenght+0xcc>
    	y++;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
    for(uint8_t row = 6; row >= 0; row--) {
 8000ca0:	7bbb      	ldrb	r3, [r7, #14]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	73bb      	strb	r3, [r7, #14]
    	for(uint8_t col = y; col < 128; col++){
 8000ca6:	e7ae      	b.n	8000c06 <lcd_draw_signalStrenght+0x2a>
    	if(row==0)break;
 8000ca8:	bf00      	nop
    }
}
 8000caa:	bf00      	nop
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	92492493 	.word	0x92492493
 8000cbc:	2000002c 	.word	0x2000002c

08000cc0 <lcd_draw_battery>:

void lcd_draw_battery(uint8_t x, uint8_t y, uint8_t value){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	71bb      	strb	r3, [r7, #6]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	717b      	strb	r3, [r7, #5]

    for (uint8_t row = x; row < 5; row++) {
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	73fb      	strb	r3, [r7, #15]
 8000cd6:	e05f      	b.n	8000d98 <lcd_draw_battery+0xd8>
        for (uint8_t col = y; col < y+12; col++) {
 8000cd8:	79bb      	ldrb	r3, [r7, #6]
 8000cda:	73bb      	strb	r3, [r7, #14]
 8000cdc:	e051      	b.n	8000d82 <lcd_draw_battery+0xc2>
            uint8_t byte = col / 8;
 8000cde:	7bbb      	ldrb	r3, [r7, #14]
 8000ce0:	08db      	lsrs	r3, r3, #3
 8000ce2:	737b      	strb	r3, [r7, #13]
            uint8_t bit = 7 - (col % 8);
 8000ce4:	7bbb      	ldrb	r3, [r7, #14]
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	733b      	strb	r3, [r7, #12]

            // Read corresponding bit from miriair_bitmap
            uint8_t src_byte = battery_bitmap[row][byte];
 8000cf0:	7bfa      	ldrb	r2, [r7, #15]
 8000cf2:	7b7b      	ldrb	r3, [r7, #13]
 8000cf4:	492c      	ldr	r1, [pc, #176]	@ (8000da8 <lcd_draw_battery+0xe8>)
 8000cf6:	0052      	lsls	r2, r2, #1
 8000cf8:	440a      	add	r2, r1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	72fb      	strb	r3, [r7, #11]
            uint8_t bit_val = (src_byte >> bit) & 0x01;
 8000d00:	7afa      	ldrb	r2, [r7, #11]
 8000d02:	7b3b      	ldrb	r3, [r7, #12]
 8000d04:	fa42 f303 	asr.w	r3, r2, r3
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	72bb      	strb	r3, [r7, #10]

            if (bit_val)
 8000d10:	7abb      	ldrb	r3, [r7, #10]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d018      	beq.n	8000d48 <lcd_draw_battery+0x88>
                framebuffer[row][byte] |=  (1 << bit);
 8000d16:	7bfa      	ldrb	r2, [r7, #15]
 8000d18:	7b7b      	ldrb	r3, [r7, #13]
 8000d1a:	4924      	ldr	r1, [pc, #144]	@ (8000dac <lcd_draw_battery+0xec>)
 8000d1c:	0112      	lsls	r2, r2, #4
 8000d1e:	440a      	add	r2, r1
 8000d20:	4413      	add	r3, r2
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b25a      	sxtb	r2, r3
 8000d26:	7b3b      	ldrb	r3, [r7, #12]
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	b25b      	sxtb	r3, r3
 8000d30:	4313      	orrs	r3, r2
 8000d32:	b259      	sxtb	r1, r3
 8000d34:	7bfa      	ldrb	r2, [r7, #15]
 8000d36:	7b7b      	ldrb	r3, [r7, #13]
 8000d38:	b2c8      	uxtb	r0, r1
 8000d3a:	491c      	ldr	r1, [pc, #112]	@ (8000dac <lcd_draw_battery+0xec>)
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	440a      	add	r2, r1
 8000d40:	4413      	add	r3, r2
 8000d42:	4602      	mov	r2, r0
 8000d44:	701a      	strb	r2, [r3, #0]
 8000d46:	e019      	b.n	8000d7c <lcd_draw_battery+0xbc>
            else
                framebuffer[row][byte] &= ~(1 << bit);
 8000d48:	7bfa      	ldrb	r2, [r7, #15]
 8000d4a:	7b7b      	ldrb	r3, [r7, #13]
 8000d4c:	4917      	ldr	r1, [pc, #92]	@ (8000dac <lcd_draw_battery+0xec>)
 8000d4e:	0112      	lsls	r2, r2, #4
 8000d50:	440a      	add	r2, r1
 8000d52:	4413      	add	r3, r2
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b25a      	sxtb	r2, r3
 8000d58:	7b3b      	ldrb	r3, [r7, #12]
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	b25b      	sxtb	r3, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	b25b      	sxtb	r3, r3
 8000d66:	4013      	ands	r3, r2
 8000d68:	b259      	sxtb	r1, r3
 8000d6a:	7bfa      	ldrb	r2, [r7, #15]
 8000d6c:	7b7b      	ldrb	r3, [r7, #13]
 8000d6e:	b2c8      	uxtb	r0, r1
 8000d70:	490e      	ldr	r1, [pc, #56]	@ (8000dac <lcd_draw_battery+0xec>)
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	440a      	add	r2, r1
 8000d76:	4413      	add	r3, r2
 8000d78:	4602      	mov	r2, r0
 8000d7a:	701a      	strb	r2, [r3, #0]
        for (uint8_t col = y; col < y+12; col++) {
 8000d7c:	7bbb      	ldrb	r3, [r7, #14]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	73bb      	strb	r3, [r7, #14]
 8000d82:	79bb      	ldrb	r3, [r7, #6]
 8000d84:	f103 020b 	add.w	r2, r3, #11
 8000d88:	7bbb      	ldrb	r3, [r7, #14]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	daa7      	bge.n	8000cde <lcd_draw_battery+0x1e>
        }
        lcd_update();
 8000d8e:	f000 f80f 	bl	8000db0 <lcd_update>
    for (uint8_t row = x; row < 5; row++) {
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	3301      	adds	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	d99c      	bls.n	8000cd8 <lcd_draw_battery+0x18>
    }

}
 8000d9e:	bf00      	nop
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	08002e94 	.word	0x08002e94
 8000dac:	2000002c 	.word	0x2000002c

08000db0 <lcd_update>:


void lcd_update(void) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
	uint8_t ch0;
	uint8_t ch1;
	uint8_t row_;
    for (uint8_t row = 0; row < 64; row++) {
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]
 8000dba:	e044      	b.n	8000e46 <lcd_update+0x96>

    	for(int col = 0; col < 8; col++){
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	e03b      	b.n	8000e3a <lcd_update+0x8a>
            row_ = row % 32;
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	f003 031f 	and.w	r3, r3, #31
 8000dc8:	71bb      	strb	r3, [r7, #6]
            uint8_t col_ = col;
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	71fb      	strb	r3, [r7, #7]
        	if(row >= 32)  //Enter lower part of screen => go to next page
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	2b1f      	cmp	r3, #31
 8000dd2:	d903      	bls.n	8000ddc <lcd_update+0x2c>
        	{
                col_ |= 0x08;
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f043 0308 	orr.w	r3, r3, #8
 8000dda:	71fb      	strb	r3, [r7, #7]
            }
//        	else{
//
//        	}

        	lcd_write(LCD_CMD_MODE, 0x80 | row_);
 8000ddc:	79bb      	ldrb	r3, [r7, #6]
 8000dde:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	4619      	mov	r1, r3
 8000de6:	2000      	movs	r0, #0
 8000de8:	f7ff fc2c 	bl	8000644 <lcd_write>
        	lcd_write(LCD_CMD_MODE, 0x80 + col_);
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	3b80      	subs	r3, #128	@ 0x80
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	4619      	mov	r1, r3
 8000df4:	2000      	movs	r0, #0
 8000df6:	f7ff fc25 	bl	8000644 <lcd_write>

            ch0 = framebuffer[row][col*2];
 8000dfa:	7bfa      	ldrb	r2, [r7, #15]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4915      	ldr	r1, [pc, #84]	@ (8000e58 <lcd_update+0xa8>)
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	440a      	add	r2, r1
 8000e06:	4413      	add	r3, r2
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	717b      	strb	r3, [r7, #5]
            ch1 = framebuffer[row][(col*2)+1];
 8000e0c:	7bfa      	ldrb	r2, [r7, #15]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	3301      	adds	r3, #1
 8000e14:	4910      	ldr	r1, [pc, #64]	@ (8000e58 <lcd_update+0xa8>)
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	440a      	add	r2, r1
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	713b      	strb	r3, [r7, #4]


            lcd_write(LCD_DATA_MODE, ch0);
 8000e20:	797b      	ldrb	r3, [r7, #5]
 8000e22:	4619      	mov	r1, r3
 8000e24:	2001      	movs	r0, #1
 8000e26:	f7ff fc0d 	bl	8000644 <lcd_write>
            lcd_write(LCD_DATA_MODE, ch1);
 8000e2a:	793b      	ldrb	r3, [r7, #4]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f7ff fc08 	bl	8000644 <lcd_write>
    	for(int col = 0; col < 8; col++){
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	3301      	adds	r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	2b07      	cmp	r3, #7
 8000e3e:	ddc0      	ble.n	8000dc2 <lcd_update+0x12>
    for (uint8_t row = 0; row < 64; row++) {
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	3301      	adds	r3, #1
 8000e44:	73fb      	strb	r3, [r7, #15]
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e4a:	d9b7      	bls.n	8000dbc <lcd_update+0xc>
    	}
    }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2000002c 	.word	0x2000002c

08000e5c <lcd_putchar_>:
    }
}



void lcd_putchar_(uint8_t x, uint8_t y, char c) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
 8000e66:	460b      	mov	r3, r1
 8000e68:	71bb      	strb	r3, [r7, #6]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	717b      	strb	r3, [r7, #5]
    if (c < 32 || c > 126) return;
 8000e6e:	797b      	ldrb	r3, [r7, #5]
 8000e70:	2b1f      	cmp	r3, #31
 8000e72:	d939      	bls.n	8000ee8 <lcd_putchar_+0x8c>
 8000e74:	797b      	ldrb	r3, [r7, #5]
 8000e76:	2b7e      	cmp	r3, #126	@ 0x7e
 8000e78:	d836      	bhi.n	8000ee8 <lcd_putchar_+0x8c>
    const uint8_t *bitmap = font_5x7[c - 32];
 8000e7a:	797b      	ldrb	r3, [r7, #5]
 8000e7c:	f1a3 0220 	sub.w	r2, r3, #32
 8000e80:	4613      	mov	r3, r2
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	1a9b      	subs	r3, r3, r2
 8000e86:	4a1a      	ldr	r2, [pc, #104]	@ (8000ef0 <lcd_putchar_+0x94>)
 8000e88:	4413      	add	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]

    for (uint8_t row = 0; row < 7; row++) {
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	75fb      	strb	r3, [r7, #23]
 8000e90:	e026      	b.n	8000ee0 <lcd_putchar_+0x84>
        uint8_t bits = bitmap[row];
 8000e92:	7dfb      	ldrb	r3, [r7, #23]
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4413      	add	r3, r2
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	73fb      	strb	r3, [r7, #15]

        for (uint8_t col = 0; col < 5; col++) {  // 5 visible columns
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	75bb      	strb	r3, [r7, #22]
 8000ea0:	e018      	b.n	8000ed4 <lcd_putchar_+0x78>
            if (bits & (1 << (4 - col))) {       // MSB on left
 8000ea2:	7bfa      	ldrb	r2, [r7, #15]
 8000ea4:	7dbb      	ldrb	r3, [r7, #22]
 8000ea6:	f1c3 0304 	rsb	r3, r3, #4
 8000eaa:	fa42 f303 	asr.w	r3, r2, r3
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d00b      	beq.n	8000ece <lcd_putchar_+0x72>
                setPixel(x + row, y + col, 1);   // x grows right, y grows down
 8000eb6:	79fa      	ldrb	r2, [r7, #7]
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	4413      	add	r3, r2
 8000ebc:	b2d8      	uxtb	r0, r3
 8000ebe:	79ba      	ldrb	r2, [r7, #6]
 8000ec0:	7dbb      	ldrb	r3, [r7, #22]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f7ff fb63 	bl	8000594 <setPixel>
        for (uint8_t col = 0; col < 5; col++) {  // 5 visible columns
 8000ece:	7dbb      	ldrb	r3, [r7, #22]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	75bb      	strb	r3, [r7, #22]
 8000ed4:	7dbb      	ldrb	r3, [r7, #22]
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	d9e3      	bls.n	8000ea2 <lcd_putchar_+0x46>
    for (uint8_t row = 0; row < 7; row++) {
 8000eda:	7dfb      	ldrb	r3, [r7, #23]
 8000edc:	3301      	adds	r3, #1
 8000ede:	75fb      	strb	r3, [r7, #23]
 8000ee0:	7dfb      	ldrb	r3, [r7, #23]
 8000ee2:	2b06      	cmp	r3, #6
 8000ee4:	d9d5      	bls.n	8000e92 <lcd_putchar_+0x36>
 8000ee6:	e000      	b.n	8000eea <lcd_putchar_+0x8e>
    if (c < 32 || c > 126) return;
 8000ee8:	bf00      	nop
            }
        }
    }
}
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	08002ecc 	.word	0x08002ecc

08000ef4 <lcd_puts>:




void lcd_puts(uint8_t x, uint8_t y, const char *str) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	603a      	str	r2, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	460b      	mov	r3, r1
 8000f02:	71bb      	strb	r3, [r7, #6]
    while (*str && y < (128 - 6)) { // stop early if too close to right edge
 8000f04:	e00b      	b.n	8000f1e <lcd_puts+0x2a>
        lcd_putchar_(x, y, *str++);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	603a      	str	r2, [r7, #0]
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	79b9      	ldrb	r1, [r7, #6]
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ffa2 	bl	8000e5c <lcd_putchar_>
        y += 6;  // 5-pixel char + 1 space
 8000f18:	79bb      	ldrb	r3, [r7, #6]
 8000f1a:	3306      	adds	r3, #6
 8000f1c:	71bb      	strb	r3, [r7, #6]
    while (*str && y < (128 - 6)) { // stop early if too close to right edge
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d002      	beq.n	8000f2c <lcd_puts+0x38>
 8000f26:	79bb      	ldrb	r3, [r7, #6]
 8000f28:	2b79      	cmp	r3, #121	@ 0x79
 8000f2a:	d9ec      	bls.n	8000f06 <lcd_puts+0x12>
    }
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	4b33      	ldr	r3, [pc, #204]	@ (800101c <MX_GPIO_Init+0xe8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a32      	ldr	r2, [pc, #200]	@ (800101c <MX_GPIO_Init+0xe8>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4b30      	ldr	r3, [pc, #192]	@ (800101c <MX_GPIO_Init+0xe8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b2c      	ldr	r3, [pc, #176]	@ (800101c <MX_GPIO_Init+0xe8>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	4a2b      	ldr	r2, [pc, #172]	@ (800101c <MX_GPIO_Init+0xe8>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f76:	4b29      	ldr	r3, [pc, #164]	@ (800101c <MX_GPIO_Init+0xe8>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	4b25      	ldr	r3, [pc, #148]	@ (800101c <MX_GPIO_Init+0xe8>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	4a24      	ldr	r2, [pc, #144]	@ (800101c <MX_GPIO_Init+0xe8>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f92:	4b22      	ldr	r3, [pc, #136]	@ (800101c <MX_GPIO_Init+0xe8>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2191      	movs	r1, #145	@ 0x91
 8000fa2:	481f      	ldr	r0, [pc, #124]	@ (8001020 <MX_GPIO_Init+0xec>)
 8000fa4:	f000 fe80 	bl	8001ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 8000fae:	481d      	ldr	r0, [pc, #116]	@ (8001024 <MX_GPIO_Init+0xf0>)
 8000fb0:	f000 fe7a 	bl	8001ca8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	21ff      	movs	r1, #255	@ 0xff
 8000fb8:	481b      	ldr	r0, [pc, #108]	@ (8001028 <MX_GPIO_Init+0xf4>)
 8000fba:	f000 fe75 	bl	8001ca8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC4 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7;
 8000fbe:	2391      	movs	r3, #145	@ 0x91
 8000fc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4812      	ldr	r0, [pc, #72]	@ (8001020 <MX_GPIO_Init+0xec>)
 8000fd6:	f000 fbdf 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA4
                           PA5 PA6 PA7 PA8
                           PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000fda:	f240 73f7 	movw	r3, #2039	@ 0x7f7
 8000fde:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	480c      	ldr	r0, [pc, #48]	@ (8001024 <MX_GPIO_Init+0xf0>)
 8000ff4:	f000 fbd0 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ff8:	23ff      	movs	r3, #255	@ 0xff
 8000ffa:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	4619      	mov	r1, r3
 800100e:	4806      	ldr	r0, [pc, #24]	@ (8001028 <MX_GPIO_Init+0xf4>)
 8001010:	f000 fbc2 	bl	8001798 <HAL_GPIO_Init>

}
 8001014:	bf00      	nop
 8001016:	3720      	adds	r7, #32
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40023800 	.word	0x40023800
 8001020:	40020800 	.word	0x40020800
 8001024:	40020000 	.word	0x40020000
 8001028:	40020400 	.word	0x40020400

0800102c <MX_GPIO_Pin_Mode>:

/* USER CODE BEGIN 2 */

void MX_GPIO_Pin_Mode(GPIO_TypeDef  *GPIOx, uint16_t GPIO_Pin, uint8_t mode){
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]
 8001038:	4613      	mov	r3, r2
 800103a:	707b      	strb	r3, [r7, #1]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
	// 1. De-initialize the pin first (optional but recommended)
	HAL_GPIO_DeInit(GPIOx, GPIO_Pin);
 800104c:	887b      	ldrh	r3, [r7, #2]
 800104e:	4619      	mov	r1, r3
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 fd35 	bl	8001ac0 <HAL_GPIO_DeInit>

	if(mode){
 8001056:	787b      	ldrb	r3, [r7, #1]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d00c      	beq.n	8001076 <MX_GPIO_Pin_Mode+0x4a>
		// 2. Reconfigure it as input
		GPIO_InitStruct.Pin = GPIO_Pin;
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;  // Or GPIO_PULLUP / GPIO_PULLDOWN
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4619      	mov	r1, r3
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 fb92 	bl	8001798 <HAL_GPIO_Init>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Push-pull output
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
	}
}
 8001074:	e00d      	b.n	8001092 <MX_GPIO_Pin_Mode+0x66>
		GPIO_InitStruct.Pin = GPIO_Pin;
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Push-pull output
 800107a:	2301      	movs	r3, #1
 800107c:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	4619      	mov	r1, r3
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 fb83 	bl	8001798 <HAL_GPIO_Init>
}
 8001092:	bf00      	nop
 8001094:	3720      	adds	r7, #32
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a2:	f000 f9fd 	bl	80014a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a6:	f000 f881 	bl	80011ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010aa:	f7ff ff43 	bl	8000f34 <MX_GPIO_Init>
  MX_TIM1_Init();
 80010ae:	f000 f95b 	bl	8001368 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  delay_init ();
 80010b2:	f7ff fa3d 	bl	8000530 <delay_init>
//  test_pixel();
//  //drawFullGrid();
//  st7920_update();


  delay_ms(100);
 80010b6:	2064      	movs	r0, #100	@ 0x64
 80010b8:	f7ff fa5e 	bl	8000578 <delay_ms>
  lcd_init();
 80010bc:	f7ff fba8 	bl	8000810 <lcd_init>
  delay_ms(100);
 80010c0:	2064      	movs	r0, #100	@ 0x64
 80010c2:	f7ff fa59 	bl	8000578 <delay_ms>

  lcd_cls();
 80010c6:	f7ff fb4b 	bl	8000760 <lcd_cls>

//


  lcd_draw_topbar();
 80010ca:	f7ff fc89 	bl	80009e0 <lcd_draw_topbar>
  lcd_update();
 80010ce:	f7ff fe6f 	bl	8000db0 <lcd_update>
  lcd_draw_battery(0,100,19);
 80010d2:	2213      	movs	r2, #19
 80010d4:	2164      	movs	r1, #100	@ 0x64
 80010d6:	2000      	movs	r0, #0
 80010d8:	f7ff fdf2 	bl	8000cc0 <lcd_draw_battery>
  lcd_draw_H_line(8,0,128);
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	2100      	movs	r1, #0
 80010e0:	2008      	movs	r0, #8
 80010e2:	f7ff fcef 	bl	8000ac4 <lcd_draw_H_line>
  lcd_draw_V_line(8,8,64);
 80010e6:	2240      	movs	r2, #64	@ 0x40
 80010e8:	2108      	movs	r1, #8
 80010ea:	2008      	movs	r0, #8
 80010ec:	f7ff fd34 	bl	8000b58 <lcd_draw_V_line>


//  lcd_clear_buffer();
  lcd_puts(10,10,"AIR TEMPRATURE");
 80010f0:	4a28      	ldr	r2, [pc, #160]	@ (8001194 <main+0xf8>)
 80010f2:	210a      	movs	r1, #10
 80010f4:	200a      	movs	r0, #10
 80010f6:	f7ff fefd 	bl	8000ef4 <lcd_puts>
  lcd_puts(20,10,"HUMIDITY");
 80010fa:	4a27      	ldr	r2, [pc, #156]	@ (8001198 <main+0xfc>)
 80010fc:	210a      	movs	r1, #10
 80010fe:	2014      	movs	r0, #20
 8001100:	f7ff fef8 	bl	8000ef4 <lcd_puts>
  lcd_puts(30,10,"PM 2.5");
 8001104:	4a25      	ldr	r2, [pc, #148]	@ (800119c <main+0x100>)
 8001106:	210a      	movs	r1, #10
 8001108:	201e      	movs	r0, #30
 800110a:	f7ff fef3 	bl	8000ef4 <lcd_puts>
  lcd_puts(40,10,"PM 10");
 800110e:	4a24      	ldr	r2, [pc, #144]	@ (80011a0 <main+0x104>)
 8001110:	210a      	movs	r1, #10
 8001112:	2028      	movs	r0, #40	@ 0x28
 8001114:	f7ff feee 	bl	8000ef4 <lcd_puts>
  lcd_puts(50,10,"CARBON DIOXIDE CO2");
 8001118:	4a22      	ldr	r2, [pc, #136]	@ (80011a4 <main+0x108>)
 800111a:	210a      	movs	r1, #10
 800111c:	2032      	movs	r0, #50	@ 0x32
 800111e:	f7ff fee9 	bl	8000ef4 <lcd_puts>
  lcd_update();
 8001122:	f7ff fe45 	bl	8000db0 <lcd_update>

//	lcd_clear_buffer();
//	lcd_puts(10, 5, "GLCD READY");
//	lcd_update_();  // push framebuffer to LCD

  uint8_t signal = 14;
 8001126:	230e      	movs	r3, #14
 8001128:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //lcd_draw_bitmap();
	  lcd_draw_pointer(9,0);
 800112a:	2100      	movs	r1, #0
 800112c:	2009      	movs	r0, #9
 800112e:	f7ff fbb5 	bl	800089c <lcd_draw_pointer>
	  delay_ms(100);
 8001132:	2064      	movs	r0, #100	@ 0x64
 8001134:	f7ff fa20 	bl	8000578 <delay_ms>
	  lcd_draw_pointer(20,0);
 8001138:	2100      	movs	r1, #0
 800113a:	2014      	movs	r0, #20
 800113c:	f7ff fbae 	bl	800089c <lcd_draw_pointer>
	  delay_ms(100);
 8001140:	2064      	movs	r0, #100	@ 0x64
 8001142:	f7ff fa19 	bl	8000578 <delay_ms>
	  lcd_draw_pointer(30,0);
 8001146:	2100      	movs	r1, #0
 8001148:	201e      	movs	r0, #30
 800114a:	f7ff fba7 	bl	800089c <lcd_draw_pointer>
	  delay_ms(100);
 800114e:	2064      	movs	r0, #100	@ 0x64
 8001150:	f7ff fa12 	bl	8000578 <delay_ms>
	  lcd_draw_pointer(40,0);
 8001154:	2100      	movs	r1, #0
 8001156:	2028      	movs	r0, #40	@ 0x28
 8001158:	f7ff fba0 	bl	800089c <lcd_draw_pointer>
	  delay_ms(100);
 800115c:	2064      	movs	r0, #100	@ 0x64
 800115e:	f7ff fa0b 	bl	8000578 <delay_ms>
	  lcd_draw_pointer(50,0);
 8001162:	2100      	movs	r1, #0
 8001164:	2032      	movs	r0, #50	@ 0x32
 8001166:	f7ff fb99 	bl	800089c <lcd_draw_pointer>
//	  //lcd_putnumber(4, 0, 1234, 1, 0, 0);
//
//	  lcd_putstring_a(4, 0, "16x8px.", 1, 0);
//
//	  lcd_putstring_b(6, 0, "16x16px.", 1);
	  lcd_draw_signalStrenght(signal);
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fd35 	bl	8000bdc <lcd_draw_signalStrenght>
	  signal +=5;
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	3305      	adds	r3, #5
 8001176:	71fb      	strb	r3, [r7, #7]
	  if(signal>=100)signal=14;
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	2b63      	cmp	r3, #99	@ 0x63
 800117c:	d901      	bls.n	8001182 <main+0xe6>
 800117e:	230e      	movs	r3, #14
 8001180:	71fb      	strb	r3, [r7, #7]
	  HAL_Delay(100);
 8001182:	2064      	movs	r0, #100	@ 0x64
 8001184:	f000 f9fe 	bl	8001584 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_7);
 8001188:	2180      	movs	r1, #128	@ 0x80
 800118a:	4807      	ldr	r0, [pc, #28]	@ (80011a8 <main+0x10c>)
 800118c:	f000 fda5 	bl	8001cda <HAL_GPIO_TogglePin>
	  lcd_draw_pointer(9,0);
 8001190:	e7cb      	b.n	800112a <main+0x8e>
 8001192:	bf00      	nop
 8001194:	08002e54 	.word	0x08002e54
 8001198:	08002e64 	.word	0x08002e64
 800119c:	08002e70 	.word	0x08002e70
 80011a0:	08002e78 	.word	0x08002e78
 80011a4:	08002e80 	.word	0x08002e80
 80011a8:	40020800 	.word	0x40020800

080011ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b094      	sub	sp, #80	@ 0x50
 80011b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	2234      	movs	r2, #52	@ 0x34
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 fe12 	bl	8002de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001280 <SystemClock_Config+0xd4>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d8:	4a29      	ldr	r2, [pc, #164]	@ (8001280 <SystemClock_Config+0xd4>)
 80011da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011de:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e0:	4b27      	ldr	r3, [pc, #156]	@ (8001280 <SystemClock_Config+0xd4>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011ec:	2300      	movs	r3, #0
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	4b24      	ldr	r3, [pc, #144]	@ (8001284 <SystemClock_Config+0xd8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011f8:	4a22      	ldr	r2, [pc, #136]	@ (8001284 <SystemClock_Config+0xd8>)
 80011fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <SystemClock_Config+0xd8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800120c:	2302      	movs	r3, #2
 800120e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001210:	2301      	movs	r3, #1
 8001212:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001214:	2310      	movs	r3, #16
 8001216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001218:	2302      	movs	r3, #2
 800121a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800121c:	2300      	movs	r3, #0
 800121e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001220:	2308      	movs	r3, #8
 8001222:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001224:	2354      	movs	r3, #84	@ 0x54
 8001226:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001228:	2302      	movs	r3, #2
 800122a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800122c:	2302      	movs	r3, #2
 800122e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001230:	2302      	movs	r3, #2
 8001232:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fff9 	bl	8002230 <HAL_RCC_OscConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001244:	f000 f820 	bl	8001288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001248:	230f      	movs	r3, #15
 800124a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124c:	2302      	movs	r3, #2
 800124e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001254:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001258:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800125a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800125e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001260:	f107 0308 	add.w	r3, r7, #8
 8001264:	2102      	movs	r1, #2
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fd52 	bl	8001d10 <HAL_RCC_ClockConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001272:	f000 f809 	bl	8001288 <Error_Handler>
  }
}
 8001276:	bf00      	nop
 8001278:	3750      	adds	r7, #80	@ 0x50
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800
 8001284:	40007000 	.word	0x40007000

08001288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800128c:	b672      	cpsid	i
}
 800128e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <Error_Handler+0x8>

08001294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b10      	ldr	r3, [pc, #64]	@ (80012e0 <HAL_MspInit+0x4c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a2:	4a0f      	ldr	r2, [pc, #60]	@ (80012e0 <HAL_MspInit+0x4c>)
 80012a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012aa:	4b0d      	ldr	r3, [pc, #52]	@ (80012e0 <HAL_MspInit+0x4c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <HAL_MspInit+0x4c>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	4a08      	ldr	r2, [pc, #32]	@ (80012e0 <HAL_MspInit+0x4c>)
 80012c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c6:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <HAL_MspInit+0x4c>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <NMI_Handler+0x4>

080012ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <MemManage_Handler+0x4>

080012fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <UsageFault_Handler+0x4>

0800130c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133a:	f000 f903 	bl	8001544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <SystemInit+0x20>)
 800134a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800134e:	4a05      	ldr	r2, [pc, #20]	@ (8001364 <SystemInit+0x20>)
 8001350:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001354:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	463b      	mov	r3, r7
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001384:	4b1e      	ldr	r3, [pc, #120]	@ (8001400 <MX_TIM1_Init+0x98>)
 8001386:	4a1f      	ldr	r2, [pc, #124]	@ (8001404 <MX_TIM1_Init+0x9c>)
 8001388:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800138a:	4b1d      	ldr	r3, [pc, #116]	@ (8001400 <MX_TIM1_Init+0x98>)
 800138c:	2253      	movs	r2, #83	@ 0x53
 800138e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001390:	4b1b      	ldr	r3, [pc, #108]	@ (8001400 <MX_TIM1_Init+0x98>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001396:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <MX_TIM1_Init+0x98>)
 8001398:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800139c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139e:	4b18      	ldr	r3, [pc, #96]	@ (8001400 <MX_TIM1_Init+0x98>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013a4:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <MX_TIM1_Init+0x98>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013aa:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <MX_TIM1_Init+0x98>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013b0:	4813      	ldr	r0, [pc, #76]	@ (8001400 <MX_TIM1_Init+0x98>)
 80013b2:	f001 f9db 	bl	800276c <HAL_TIM_Base_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80013bc:	f7ff ff64 	bl	8001288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	4619      	mov	r1, r3
 80013cc:	480c      	ldr	r0, [pc, #48]	@ (8001400 <MX_TIM1_Init+0x98>)
 80013ce:	f001 fa85 	bl	80028dc <HAL_TIM_ConfigClockSource>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013d8:	f7ff ff56 	bl	8001288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	@ (8001400 <MX_TIM1_Init+0x98>)
 80013ea:	f001 fc7f 	bl	8002cec <HAL_TIMEx_MasterConfigSynchronization>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013f4:	f7ff ff48 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000438 	.word	0x20000438
 8001404:	40010000 	.word	0x40010000

08001408 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0b      	ldr	r2, [pc, #44]	@ (8001444 <HAL_TIM_Base_MspInit+0x3c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d10d      	bne.n	8001436 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <HAL_TIM_Base_MspInit+0x40>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001422:	4a09      	ldr	r2, [pc, #36]	@ (8001448 <HAL_TIM_Base_MspInit+0x40>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6453      	str	r3, [r2, #68]	@ 0x44
 800142a:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <HAL_TIM_Base_MspInit+0x40>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40010000 	.word	0x40010000
 8001448:	40023800 	.word	0x40023800

0800144c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800144c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001484 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001450:	f7ff ff78 	bl	8001344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001454:	480c      	ldr	r0, [pc, #48]	@ (8001488 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001456:	490d      	ldr	r1, [pc, #52]	@ (800148c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001458:	4a0d      	ldr	r2, [pc, #52]	@ (8001490 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800145c:	e002      	b.n	8001464 <LoopCopyDataInit>

0800145e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001462:	3304      	adds	r3, #4

08001464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001468:	d3f9      	bcc.n	800145e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146a:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800146c:	4c0a      	ldr	r4, [pc, #40]	@ (8001498 <LoopFillZerobss+0x22>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001470:	e001      	b.n	8001476 <LoopFillZerobss>

08001472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001474:	3204      	adds	r2, #4

08001476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001478:	d3fb      	bcc.n	8001472 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800147a:	f001 fcbb 	bl	8002df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800147e:	f7ff fe0d 	bl	800109c <main>
  bx  lr    
 8001482:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001484:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800148c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001490:	08003188 	.word	0x08003188
  ldr r2, =_sbss
 8001494:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001498:	20000484 	.word	0x20000484

0800149c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800149c:	e7fe      	b.n	800149c <ADC_IRQHandler>
	...

080014a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014a4:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <HAL_Init+0x40>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0d      	ldr	r2, [pc, #52]	@ (80014e0 <HAL_Init+0x40>)
 80014aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014b0:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <HAL_Init+0x40>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0a      	ldr	r2, [pc, #40]	@ (80014e0 <HAL_Init+0x40>)
 80014b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014bc:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <HAL_Init+0x40>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a07      	ldr	r2, [pc, #28]	@ (80014e0 <HAL_Init+0x40>)
 80014c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c8:	2003      	movs	r0, #3
 80014ca:	f000 f931 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ce:	200f      	movs	r0, #15
 80014d0:	f000 f808 	bl	80014e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d4:	f7ff fede 	bl	8001294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023c00 	.word	0x40023c00

080014e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ec:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <HAL_InitTick+0x54>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b12      	ldr	r3, [pc, #72]	@ (800153c <HAL_InitTick+0x58>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4619      	mov	r1, r3
 80014f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001502:	4618      	mov	r0, r3
 8001504:	f000 f93b 	bl	800177e <HAL_SYSTICK_Config>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e00e      	b.n	8001530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b0f      	cmp	r3, #15
 8001516:	d80a      	bhi.n	800152e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001518:	2200      	movs	r2, #0
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f000 f911 	bl	8001746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001524:	4a06      	ldr	r2, [pc, #24]	@ (8001540 <HAL_InitTick+0x5c>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	e000      	b.n	8001530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000004 	.word	0x20000004
 800153c:	2000000c 	.word	0x2000000c
 8001540:	20000008 	.word	0x20000008

08001544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <HAL_IncTick+0x20>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <HAL_IncTick+0x24>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4413      	add	r3, r2
 8001554:	4a04      	ldr	r2, [pc, #16]	@ (8001568 <HAL_IncTick+0x24>)
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	2000000c 	.word	0x2000000c
 8001568:	20000480 	.word	0x20000480

0800156c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return uwTick;
 8001570:	4b03      	ldr	r3, [pc, #12]	@ (8001580 <HAL_GetTick+0x14>)
 8001572:	681b      	ldr	r3, [r3, #0]
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000480 	.word	0x20000480

08001584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800158c:	f7ff ffee 	bl	800156c <HAL_GetTick>
 8001590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159c:	d005      	beq.n	80015aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800159e:	4b0a      	ldr	r3, [pc, #40]	@ (80015c8 <HAL_Delay+0x44>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4413      	add	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015aa:	bf00      	nop
 80015ac:	f7ff ffde 	bl	800156c <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d8f7      	bhi.n	80015ac <HAL_Delay+0x28>
  {
  }
}
 80015bc:	bf00      	nop
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000000c 	.word	0x2000000c

080015cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015e8:	4013      	ands	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001618:	4b04      	ldr	r3, [pc, #16]	@ (800162c <__NVIC_GetPriorityGrouping+0x18>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	f003 0307 	and.w	r3, r3, #7
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	2b00      	cmp	r3, #0
 8001642:	db0a      	blt.n	800165a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	490c      	ldr	r1, [pc, #48]	@ (800167c <__NVIC_SetPriority+0x4c>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	0112      	lsls	r2, r2, #4
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	440b      	add	r3, r1
 8001654:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001658:	e00a      	b.n	8001670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4908      	ldr	r1, [pc, #32]	@ (8001680 <__NVIC_SetPriority+0x50>)
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	3b04      	subs	r3, #4
 8001668:	0112      	lsls	r2, r2, #4
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	440b      	add	r3, r1
 800166e:	761a      	strb	r2, [r3, #24]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000e100 	.word	0xe000e100
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	@ 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f1c3 0307 	rsb	r3, r3, #7
 800169e:	2b04      	cmp	r3, #4
 80016a0:	bf28      	it	cs
 80016a2:	2304      	movcs	r3, #4
 80016a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3304      	adds	r3, #4
 80016aa:	2b06      	cmp	r3, #6
 80016ac:	d902      	bls.n	80016b4 <NVIC_EncodePriority+0x30>
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3b03      	subs	r3, #3
 80016b2:	e000      	b.n	80016b6 <NVIC_EncodePriority+0x32>
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43da      	mvns	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	401a      	ands	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	43d9      	mvns	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	4313      	orrs	r3, r2
         );
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3724      	adds	r7, #36	@ 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016fc:	d301      	bcc.n	8001702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fe:	2301      	movs	r3, #1
 8001700:	e00f      	b.n	8001722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001702:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <SysTick_Config+0x40>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170a:	210f      	movs	r1, #15
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f7ff ff8e 	bl	8001630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001714:	4b05      	ldr	r3, [pc, #20]	@ (800172c <SysTick_Config+0x40>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	4b04      	ldr	r3, [pc, #16]	@ (800172c <SysTick_Config+0x40>)
 800171c:	2207      	movs	r2, #7
 800171e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	e000e010 	.word	0xe000e010

08001730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff47 	bl	80015cc <__NVIC_SetPriorityGrouping>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001758:	f7ff ff5c 	bl	8001614 <__NVIC_GetPriorityGrouping>
 800175c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7ff ff8e 	bl	8001684 <NVIC_EncodePriority>
 8001768:	4602      	mov	r2, r0
 800176a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5d 	bl	8001630 <__NVIC_SetPriority>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffb0 	bl	80016ec <SysTick_Config>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	@ 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	e165      	b.n	8001a80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017b4:	2201      	movs	r2, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	f040 8154 	bne.w	8001a7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d005      	beq.n	80017ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d130      	bne.n	800184c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2203      	movs	r2, #3
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001820:	2201      	movs	r2, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	f003 0201 	and.w	r2, r3, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	2b03      	cmp	r3, #3
 8001856:	d017      	beq.n	8001888 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	2203      	movs	r2, #3
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d123      	bne.n	80018dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	08da      	lsrs	r2, r3, #3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3208      	adds	r2, #8
 800189c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	220f      	movs	r2, #15
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	691a      	ldr	r2, [r3, #16]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	08da      	lsrs	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3208      	adds	r2, #8
 80018d6:	69b9      	ldr	r1, [r7, #24]
 80018d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	2203      	movs	r2, #3
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0203 	and.w	r2, r3, #3
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80ae 	beq.w	8001a7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b5d      	ldr	r3, [pc, #372]	@ (8001a98 <HAL_GPIO_Init+0x300>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001926:	4a5c      	ldr	r2, [pc, #368]	@ (8001a98 <HAL_GPIO_Init+0x300>)
 8001928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800192c:	6453      	str	r3, [r2, #68]	@ 0x44
 800192e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a98 <HAL_GPIO_Init+0x300>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800193a:	4a58      	ldr	r2, [pc, #352]	@ (8001a9c <HAL_GPIO_Init+0x304>)
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	089b      	lsrs	r3, r3, #2
 8001940:	3302      	adds	r3, #2
 8001942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	220f      	movs	r2, #15
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4f      	ldr	r2, [pc, #316]	@ (8001aa0 <HAL_GPIO_Init+0x308>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d025      	beq.n	80019b2 <HAL_GPIO_Init+0x21a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4e      	ldr	r2, [pc, #312]	@ (8001aa4 <HAL_GPIO_Init+0x30c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d01f      	beq.n	80019ae <HAL_GPIO_Init+0x216>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4d      	ldr	r2, [pc, #308]	@ (8001aa8 <HAL_GPIO_Init+0x310>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d019      	beq.n	80019aa <HAL_GPIO_Init+0x212>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4c      	ldr	r2, [pc, #304]	@ (8001aac <HAL_GPIO_Init+0x314>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d013      	beq.n	80019a6 <HAL_GPIO_Init+0x20e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4b      	ldr	r2, [pc, #300]	@ (8001ab0 <HAL_GPIO_Init+0x318>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d00d      	beq.n	80019a2 <HAL_GPIO_Init+0x20a>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4a      	ldr	r2, [pc, #296]	@ (8001ab4 <HAL_GPIO_Init+0x31c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d007      	beq.n	800199e <HAL_GPIO_Init+0x206>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a49      	ldr	r2, [pc, #292]	@ (8001ab8 <HAL_GPIO_Init+0x320>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d101      	bne.n	800199a <HAL_GPIO_Init+0x202>
 8001996:	2306      	movs	r3, #6
 8001998:	e00c      	b.n	80019b4 <HAL_GPIO_Init+0x21c>
 800199a:	2307      	movs	r3, #7
 800199c:	e00a      	b.n	80019b4 <HAL_GPIO_Init+0x21c>
 800199e:	2305      	movs	r3, #5
 80019a0:	e008      	b.n	80019b4 <HAL_GPIO_Init+0x21c>
 80019a2:	2304      	movs	r3, #4
 80019a4:	e006      	b.n	80019b4 <HAL_GPIO_Init+0x21c>
 80019a6:	2303      	movs	r3, #3
 80019a8:	e004      	b.n	80019b4 <HAL_GPIO_Init+0x21c>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e002      	b.n	80019b4 <HAL_GPIO_Init+0x21c>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_GPIO_Init+0x21c>
 80019b2:	2300      	movs	r3, #0
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	f002 0203 	and.w	r2, r2, #3
 80019ba:	0092      	lsls	r2, r2, #2
 80019bc:	4093      	lsls	r3, r2
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c4:	4935      	ldr	r1, [pc, #212]	@ (8001a9c <HAL_GPIO_Init+0x304>)
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	089b      	lsrs	r3, r3, #2
 80019ca:	3302      	adds	r3, #2
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d2:	4b3a      	ldr	r3, [pc, #232]	@ (8001abc <HAL_GPIO_Init+0x324>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019f6:	4a31      	ldr	r2, [pc, #196]	@ (8001abc <HAL_GPIO_Init+0x324>)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019fc:	4b2f      	ldr	r3, [pc, #188]	@ (8001abc <HAL_GPIO_Init+0x324>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a20:	4a26      	ldr	r2, [pc, #152]	@ (8001abc <HAL_GPIO_Init+0x324>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a26:	4b25      	ldr	r3, [pc, #148]	@ (8001abc <HAL_GPIO_Init+0x324>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001abc <HAL_GPIO_Init+0x324>)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a50:	4b1a      	ldr	r3, [pc, #104]	@ (8001abc <HAL_GPIO_Init+0x324>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a74:	4a11      	ldr	r2, [pc, #68]	@ (8001abc <HAL_GPIO_Init+0x324>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	2b0f      	cmp	r3, #15
 8001a84:	f67f ae96 	bls.w	80017b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3724      	adds	r7, #36	@ 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40013800 	.word	0x40013800
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	40020400 	.word	0x40020400
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	40020c00 	.word	0x40020c00
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40021400 	.word	0x40021400
 8001ab8:	40021800 	.word	0x40021800
 8001abc:	40013c00 	.word	0x40013c00

08001ac0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	e0c7      	b.n	8001c6c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001adc:	2201      	movs	r2, #1
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	f040 80b7 	bne.w	8001c66 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001af8:	4a62      	ldr	r2, [pc, #392]	@ (8001c84 <HAL_GPIO_DeInit+0x1c4>)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	3302      	adds	r3, #2
 8001b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b04:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	220f      	movs	r2, #15
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	68ba      	ldr	r2, [r7, #8]
 8001b16:	4013      	ands	r3, r2
 8001b18:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a5a      	ldr	r2, [pc, #360]	@ (8001c88 <HAL_GPIO_DeInit+0x1c8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d025      	beq.n	8001b6e <HAL_GPIO_DeInit+0xae>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a59      	ldr	r2, [pc, #356]	@ (8001c8c <HAL_GPIO_DeInit+0x1cc>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d01f      	beq.n	8001b6a <HAL_GPIO_DeInit+0xaa>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a58      	ldr	r2, [pc, #352]	@ (8001c90 <HAL_GPIO_DeInit+0x1d0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d019      	beq.n	8001b66 <HAL_GPIO_DeInit+0xa6>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a57      	ldr	r2, [pc, #348]	@ (8001c94 <HAL_GPIO_DeInit+0x1d4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d013      	beq.n	8001b62 <HAL_GPIO_DeInit+0xa2>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a56      	ldr	r2, [pc, #344]	@ (8001c98 <HAL_GPIO_DeInit+0x1d8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d00d      	beq.n	8001b5e <HAL_GPIO_DeInit+0x9e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a55      	ldr	r2, [pc, #340]	@ (8001c9c <HAL_GPIO_DeInit+0x1dc>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d007      	beq.n	8001b5a <HAL_GPIO_DeInit+0x9a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a54      	ldr	r2, [pc, #336]	@ (8001ca0 <HAL_GPIO_DeInit+0x1e0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d101      	bne.n	8001b56 <HAL_GPIO_DeInit+0x96>
 8001b52:	2306      	movs	r3, #6
 8001b54:	e00c      	b.n	8001b70 <HAL_GPIO_DeInit+0xb0>
 8001b56:	2307      	movs	r3, #7
 8001b58:	e00a      	b.n	8001b70 <HAL_GPIO_DeInit+0xb0>
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	e008      	b.n	8001b70 <HAL_GPIO_DeInit+0xb0>
 8001b5e:	2304      	movs	r3, #4
 8001b60:	e006      	b.n	8001b70 <HAL_GPIO_DeInit+0xb0>
 8001b62:	2303      	movs	r3, #3
 8001b64:	e004      	b.n	8001b70 <HAL_GPIO_DeInit+0xb0>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e002      	b.n	8001b70 <HAL_GPIO_DeInit+0xb0>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <HAL_GPIO_DeInit+0xb0>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	f002 0203 	and.w	r2, r2, #3
 8001b76:	0092      	lsls	r2, r2, #2
 8001b78:	4093      	lsls	r3, r2
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d132      	bne.n	8001be6 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001b80:	4b48      	ldr	r3, [pc, #288]	@ (8001ca4 <HAL_GPIO_DeInit+0x1e4>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	4946      	ldr	r1, [pc, #280]	@ (8001ca4 <HAL_GPIO_DeInit+0x1e4>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001b8e:	4b45      	ldr	r3, [pc, #276]	@ (8001ca4 <HAL_GPIO_DeInit+0x1e4>)
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	4943      	ldr	r1, [pc, #268]	@ (8001ca4 <HAL_GPIO_DeInit+0x1e4>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001b9c:	4b41      	ldr	r3, [pc, #260]	@ (8001ca4 <HAL_GPIO_DeInit+0x1e4>)
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	493f      	ldr	r1, [pc, #252]	@ (8001ca4 <HAL_GPIO_DeInit+0x1e4>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001baa:	4b3e      	ldr	r3, [pc, #248]	@ (8001ca4 <HAL_GPIO_DeInit+0x1e4>)
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	493c      	ldr	r1, [pc, #240]	@ (8001ca4 <HAL_GPIO_DeInit+0x1e4>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	220f      	movs	r2, #15
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001bc8:	4a2e      	ldr	r2, [pc, #184]	@ (8001c84 <HAL_GPIO_DeInit+0x1c4>)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	3302      	adds	r3, #2
 8001bd0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	43da      	mvns	r2, r3
 8001bd8:	482a      	ldr	r0, [pc, #168]	@ (8001c84 <HAL_GPIO_DeInit+0x1c4>)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	400a      	ands	r2, r1
 8001be0:	3302      	adds	r3, #2
 8001be2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2103      	movs	r1, #3
 8001bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	08da      	lsrs	r2, r3, #3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3208      	adds	r2, #8
 8001c04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	220f      	movs	r2, #15
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	08d2      	lsrs	r2, r2, #3
 8001c1c:	4019      	ands	r1, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3208      	adds	r2, #8
 8001c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2103      	movs	r1, #3
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	401a      	ands	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	2101      	movs	r1, #1
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	fa01 f303 	lsl.w	r3, r1, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	2103      	movs	r1, #3
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	401a      	ands	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2b0f      	cmp	r3, #15
 8001c70:	f67f af34 	bls.w	8001adc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	371c      	adds	r7, #28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40013800 	.word	0x40013800
 8001c88:	40020000 	.word	0x40020000
 8001c8c:	40020400 	.word	0x40020400
 8001c90:	40020800 	.word	0x40020800
 8001c94:	40020c00 	.word	0x40020c00
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40021400 	.word	0x40021400
 8001ca0:	40021800 	.word	0x40021800
 8001ca4:	40013c00 	.word	0x40013c00

08001ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	807b      	strh	r3, [r7, #2]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cb8:	787b      	ldrb	r3, [r7, #1]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cbe:	887a      	ldrh	r2, [r7, #2]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cc4:	e003      	b.n	8001cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cc6:	887b      	ldrh	r3, [r7, #2]
 8001cc8:	041a      	lsls	r2, r3, #16
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	619a      	str	r2, [r3, #24]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b085      	sub	sp, #20
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cec:	887a      	ldrh	r2, [r7, #2]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	041a      	lsls	r2, r3, #16
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	43d9      	mvns	r1, r3
 8001cf8:	887b      	ldrh	r3, [r7, #2]
 8001cfa:	400b      	ands	r3, r1
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	619a      	str	r2, [r3, #24]
}
 8001d02:	bf00      	nop
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0cc      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d24:	4b68      	ldr	r3, [pc, #416]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d90c      	bls.n	8001d4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d32:	4b65      	ldr	r3, [pc, #404]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b63      	ldr	r3, [pc, #396]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0b8      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d020      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d64:	4b59      	ldr	r3, [pc, #356]	@ (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	4a58      	ldr	r2, [pc, #352]	@ (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d7c:	4b53      	ldr	r3, [pc, #332]	@ (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4a52      	ldr	r2, [pc, #328]	@ (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d88:	4b50      	ldr	r3, [pc, #320]	@ (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	494d      	ldr	r1, [pc, #308]	@ (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d044      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	4b47      	ldr	r3, [pc, #284]	@ (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d119      	bne.n	8001dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e07f      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d003      	beq.n	8001dce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dce:	4b3f      	ldr	r3, [pc, #252]	@ (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d109      	bne.n	8001dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e06f      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dde:	4b3b      	ldr	r3, [pc, #236]	@ (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e067      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dee:	4b37      	ldr	r3, [pc, #220]	@ (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f023 0203 	bic.w	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4934      	ldr	r1, [pc, #208]	@ (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e00:	f7ff fbb4 	bl	800156c <HAL_GetTick>
 8001e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e08:	f7ff fbb0 	bl	800156c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e04f      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 020c 	and.w	r2, r3, #12
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1eb      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e30:	4b25      	ldr	r3, [pc, #148]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d20c      	bcs.n	8001e58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	4b22      	ldr	r3, [pc, #136]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b20      	ldr	r3, [pc, #128]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e032      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e64:	4b19      	ldr	r3, [pc, #100]	@ (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4916      	ldr	r1, [pc, #88]	@ (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d009      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e82:	4b12      	ldr	r3, [pc, #72]	@ (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	490e      	ldr	r1, [pc, #56]	@ (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e96:	f000 f821 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	490a      	ldr	r1, [pc, #40]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea8:	5ccb      	ldrb	r3, [r1, r3]
 8001eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001eae:	4a09      	ldr	r2, [pc, #36]	@ (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001eb2:	4b09      	ldr	r3, [pc, #36]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fb14 	bl	80014e4 <HAL_InitTick>

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023c00 	.word	0x40023c00
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	08003168 	.word	0x08003168
 8001ed4:	20000004 	.word	0x20000004
 8001ed8:	20000008 	.word	0x20000008

08001edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ee0:	b0a6      	sub	sp, #152	@ 0x98
 8001ee2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f02:	4bc8      	ldr	r3, [pc, #800]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b0c      	cmp	r3, #12
 8001f0c:	f200 817e 	bhi.w	800220c <HAL_RCC_GetSysClockFreq+0x330>
 8001f10:	a201      	add	r2, pc, #4	@ (adr r2, 8001f18 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f16:	bf00      	nop
 8001f18:	08001f4d 	.word	0x08001f4d
 8001f1c:	0800220d 	.word	0x0800220d
 8001f20:	0800220d 	.word	0x0800220d
 8001f24:	0800220d 	.word	0x0800220d
 8001f28:	08001f55 	.word	0x08001f55
 8001f2c:	0800220d 	.word	0x0800220d
 8001f30:	0800220d 	.word	0x0800220d
 8001f34:	0800220d 	.word	0x0800220d
 8001f38:	08001f5d 	.word	0x08001f5d
 8001f3c:	0800220d 	.word	0x0800220d
 8001f40:	0800220d 	.word	0x0800220d
 8001f44:	0800220d 	.word	0x0800220d
 8001f48:	080020c7 	.word	0x080020c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f4c:	4bb6      	ldr	r3, [pc, #728]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001f4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001f52:	e15f      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f54:	4bb5      	ldr	r3, [pc, #724]	@ (800222c <HAL_RCC_GetSysClockFreq+0x350>)
 8001f56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001f5a:	e15b      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f5c:	4bb1      	ldr	r3, [pc, #708]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f68:	4bae      	ldr	r3, [pc, #696]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d031      	beq.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f74:	4bab      	ldr	r3, [pc, #684]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	099b      	lsrs	r3, r3, #6
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001f7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001f80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f86:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f88:	2300      	movs	r3, #0
 8001f8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f8c:	4ba7      	ldr	r3, [pc, #668]	@ (800222c <HAL_RCC_GetSysClockFreq+0x350>)
 8001f8e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001f92:	462a      	mov	r2, r5
 8001f94:	fb03 f202 	mul.w	r2, r3, r2
 8001f98:	2300      	movs	r3, #0
 8001f9a:	4621      	mov	r1, r4
 8001f9c:	fb01 f303 	mul.w	r3, r1, r3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4aa2      	ldr	r2, [pc, #648]	@ (800222c <HAL_RCC_GetSysClockFreq+0x350>)
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	fba1 1202 	umull	r1, r2, r1, r2
 8001faa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001fac:	460a      	mov	r2, r1
 8001fae:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001fb0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001fb2:	4413      	add	r3, r2
 8001fb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fba:	2200      	movs	r2, #0
 8001fbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001fbe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001fc0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001fc4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001fc8:	f7fe f91c 	bl	8000204 <__aeabi_uldivmod>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001fd6:	e064      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd8:	4b92      	ldr	r3, [pc, #584]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x348>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	099b      	lsrs	r3, r3, #6
 8001fde:	2200      	movs	r2, #0
 8001fe0:	653b      	str	r3, [r7, #80]	@ 0x50
 8001fe2:	657a      	str	r2, [r7, #84]	@ 0x54
 8001fe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001fec:	2300      	movs	r3, #0
 8001fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ff0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001ff4:	4622      	mov	r2, r4
 8001ff6:	462b      	mov	r3, r5
 8001ff8:	f04f 0000 	mov.w	r0, #0
 8001ffc:	f04f 0100 	mov.w	r1, #0
 8002000:	0159      	lsls	r1, r3, #5
 8002002:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002006:	0150      	lsls	r0, r2, #5
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4621      	mov	r1, r4
 800200e:	1a51      	subs	r1, r2, r1
 8002010:	6139      	str	r1, [r7, #16]
 8002012:	4629      	mov	r1, r5
 8002014:	eb63 0301 	sbc.w	r3, r3, r1
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002026:	4659      	mov	r1, fp
 8002028:	018b      	lsls	r3, r1, #6
 800202a:	4651      	mov	r1, sl
 800202c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002030:	4651      	mov	r1, sl
 8002032:	018a      	lsls	r2, r1, #6
 8002034:	4651      	mov	r1, sl
 8002036:	ebb2 0801 	subs.w	r8, r2, r1
 800203a:	4659      	mov	r1, fp
 800203c:	eb63 0901 	sbc.w	r9, r3, r1
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800204c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002050:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002054:	4690      	mov	r8, r2
 8002056:	4699      	mov	r9, r3
 8002058:	4623      	mov	r3, r4
 800205a:	eb18 0303 	adds.w	r3, r8, r3
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	462b      	mov	r3, r5
 8002062:	eb49 0303 	adc.w	r3, r9, r3
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002074:	4629      	mov	r1, r5
 8002076:	028b      	lsls	r3, r1, #10
 8002078:	4621      	mov	r1, r4
 800207a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800207e:	4621      	mov	r1, r4
 8002080:	028a      	lsls	r2, r1, #10
 8002082:	4610      	mov	r0, r2
 8002084:	4619      	mov	r1, r3
 8002086:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800208a:	2200      	movs	r2, #0
 800208c:	643b      	str	r3, [r7, #64]	@ 0x40
 800208e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002090:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002094:	f7fe f8b6 	bl	8000204 <__aeabi_uldivmod>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4613      	mov	r3, r2
 800209e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80020a2:	4b60      	ldr	r3, [pc, #384]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x348>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	0c1b      	lsrs	r3, r3, #16
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	3301      	adds	r3, #1
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80020b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80020b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80020c4:	e0a6      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020c6:	4b57      	ldr	r3, [pc, #348]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x348>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020d2:	4b54      	ldr	r3, [pc, #336]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x348>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d02a      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020de:	4b51      	ldr	r3, [pc, #324]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x348>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	099b      	lsrs	r3, r3, #6
 80020e4:	2200      	movs	r2, #0
 80020e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80020e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80020ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020f0:	2100      	movs	r1, #0
 80020f2:	4b4e      	ldr	r3, [pc, #312]	@ (800222c <HAL_RCC_GetSysClockFreq+0x350>)
 80020f4:	fb03 f201 	mul.w	r2, r3, r1
 80020f8:	2300      	movs	r3, #0
 80020fa:	fb00 f303 	mul.w	r3, r0, r3
 80020fe:	4413      	add	r3, r2
 8002100:	4a4a      	ldr	r2, [pc, #296]	@ (800222c <HAL_RCC_GetSysClockFreq+0x350>)
 8002102:	fba0 1202 	umull	r1, r2, r0, r2
 8002106:	677a      	str	r2, [r7, #116]	@ 0x74
 8002108:	460a      	mov	r2, r1
 800210a:	673a      	str	r2, [r7, #112]	@ 0x70
 800210c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800210e:	4413      	add	r3, r2
 8002110:	677b      	str	r3, [r7, #116]	@ 0x74
 8002112:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002116:	2200      	movs	r2, #0
 8002118:	633b      	str	r3, [r7, #48]	@ 0x30
 800211a:	637a      	str	r2, [r7, #52]	@ 0x34
 800211c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002120:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002124:	f7fe f86e 	bl	8000204 <__aeabi_uldivmod>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4613      	mov	r3, r2
 800212e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002132:	e05b      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002134:	4b3b      	ldr	r3, [pc, #236]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x348>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	099b      	lsrs	r3, r3, #6
 800213a:	2200      	movs	r2, #0
 800213c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800213e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002146:	623b      	str	r3, [r7, #32]
 8002148:	2300      	movs	r3, #0
 800214a:	627b      	str	r3, [r7, #36]	@ 0x24
 800214c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002150:	4642      	mov	r2, r8
 8002152:	464b      	mov	r3, r9
 8002154:	f04f 0000 	mov.w	r0, #0
 8002158:	f04f 0100 	mov.w	r1, #0
 800215c:	0159      	lsls	r1, r3, #5
 800215e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002162:	0150      	lsls	r0, r2, #5
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4641      	mov	r1, r8
 800216a:	ebb2 0a01 	subs.w	sl, r2, r1
 800216e:	4649      	mov	r1, r9
 8002170:	eb63 0b01 	sbc.w	fp, r3, r1
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002180:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002184:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002188:	ebb2 040a 	subs.w	r4, r2, sl
 800218c:	eb63 050b 	sbc.w	r5, r3, fp
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	00eb      	lsls	r3, r5, #3
 800219a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800219e:	00e2      	lsls	r2, r4, #3
 80021a0:	4614      	mov	r4, r2
 80021a2:	461d      	mov	r5, r3
 80021a4:	4643      	mov	r3, r8
 80021a6:	18e3      	adds	r3, r4, r3
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	464b      	mov	r3, r9
 80021ac:	eb45 0303 	adc.w	r3, r5, r3
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021be:	4629      	mov	r1, r5
 80021c0:	028b      	lsls	r3, r1, #10
 80021c2:	4621      	mov	r1, r4
 80021c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021c8:	4621      	mov	r1, r4
 80021ca:	028a      	lsls	r2, r1, #10
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021d4:	2200      	movs	r2, #0
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	61fa      	str	r2, [r7, #28]
 80021da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021de:	f7fe f811 	bl	8000204 <__aeabi_uldivmod>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4613      	mov	r3, r2
 80021e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80021ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x348>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	0f1b      	lsrs	r3, r3, #28
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80021fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80021fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002202:	fbb2 f3f3 	udiv	r3, r2, r3
 8002206:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800220a:	e003      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800220c:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x34c>)
 800220e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002212:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002214:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002218:	4618      	mov	r0, r3
 800221a:	3798      	adds	r7, #152	@ 0x98
 800221c:	46bd      	mov	sp, r7
 800221e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	00f42400 	.word	0x00f42400
 800222c:	017d7840 	.word	0x017d7840

08002230 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e28d      	b.n	800275e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 8083 	beq.w	8002356 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002250:	4b94      	ldr	r3, [pc, #592]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	2b04      	cmp	r3, #4
 800225a:	d019      	beq.n	8002290 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800225c:	4b91      	ldr	r3, [pc, #580]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 030c 	and.w	r3, r3, #12
        || \
 8002264:	2b08      	cmp	r3, #8
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002268:	4b8e      	ldr	r3, [pc, #568]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002270:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002274:	d00c      	beq.n	8002290 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002276:	4b8b      	ldr	r3, [pc, #556]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800227e:	2b0c      	cmp	r3, #12
 8002280:	d112      	bne.n	80022a8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002282:	4b88      	ldr	r3, [pc, #544]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800228a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800228e:	d10b      	bne.n	80022a8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002290:	4b84      	ldr	r3, [pc, #528]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d05b      	beq.n	8002354 <HAL_RCC_OscConfig+0x124>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d157      	bne.n	8002354 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e25a      	b.n	800275e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022b0:	d106      	bne.n	80022c0 <HAL_RCC_OscConfig+0x90>
 80022b2:	4b7c      	ldr	r3, [pc, #496]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a7b      	ldr	r2, [pc, #492]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 80022b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e01d      	b.n	80022fc <HAL_RCC_OscConfig+0xcc>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0xb4>
 80022ca:	4b76      	ldr	r3, [pc, #472]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a75      	ldr	r2, [pc, #468]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 80022d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b73      	ldr	r3, [pc, #460]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a72      	ldr	r2, [pc, #456]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 80022dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	e00b      	b.n	80022fc <HAL_RCC_OscConfig+0xcc>
 80022e4:	4b6f      	ldr	r3, [pc, #444]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a6e      	ldr	r2, [pc, #440]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 80022ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b6c      	ldr	r3, [pc, #432]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a6b      	ldr	r2, [pc, #428]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 80022f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d013      	beq.n	800232c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002304:	f7ff f932 	bl	800156c <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230c:	f7ff f92e 	bl	800156c <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	@ 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e21f      	b.n	800275e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	4b61      	ldr	r3, [pc, #388]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0xdc>
 800232a:	e014      	b.n	8002356 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7ff f91e 	bl	800156c <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002334:	f7ff f91a 	bl	800156c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	@ 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e20b      	b.n	800275e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002346:	4b57      	ldr	r3, [pc, #348]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x104>
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d06f      	beq.n	8002442 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002362:	4b50      	ldr	r3, [pc, #320]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	2b00      	cmp	r3, #0
 800236c:	d017      	beq.n	800239e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800236e:	4b4d      	ldr	r3, [pc, #308]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
        || \
 8002376:	2b08      	cmp	r3, #8
 8002378:	d105      	bne.n	8002386 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800237a:	4b4a      	ldr	r3, [pc, #296]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00b      	beq.n	800239e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002386:	4b47      	ldr	r3, [pc, #284]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800238e:	2b0c      	cmp	r3, #12
 8002390:	d11c      	bne.n	80023cc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002392:	4b44      	ldr	r3, [pc, #272]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d116      	bne.n	80023cc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239e:	4b41      	ldr	r3, [pc, #260]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_RCC_OscConfig+0x186>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d001      	beq.n	80023b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e1d3      	b.n	800275e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b6:	4b3b      	ldr	r3, [pc, #236]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4937      	ldr	r1, [pc, #220]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ca:	e03a      	b.n	8002442 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d020      	beq.n	8002416 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d4:	4b34      	ldr	r3, [pc, #208]	@ (80024a8 <HAL_RCC_OscConfig+0x278>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023da:	f7ff f8c7 	bl	800156c <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e2:	f7ff f8c3 	bl	800156c <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e1b4      	b.n	800275e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f4:	4b2b      	ldr	r3, [pc, #172]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002400:	4b28      	ldr	r3, [pc, #160]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4925      	ldr	r1, [pc, #148]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 8002410:	4313      	orrs	r3, r2
 8002412:	600b      	str	r3, [r1, #0]
 8002414:	e015      	b.n	8002442 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002416:	4b24      	ldr	r3, [pc, #144]	@ (80024a8 <HAL_RCC_OscConfig+0x278>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7ff f8a6 	bl	800156c <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002424:	f7ff f8a2 	bl	800156c <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e193      	b.n	800275e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002436:	4b1b      	ldr	r3, [pc, #108]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d036      	beq.n	80024bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d016      	beq.n	8002484 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002456:	4b15      	ldr	r3, [pc, #84]	@ (80024ac <HAL_RCC_OscConfig+0x27c>)
 8002458:	2201      	movs	r2, #1
 800245a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245c:	f7ff f886 	bl	800156c <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002464:	f7ff f882 	bl	800156c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e173      	b.n	800275e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002476:	4b0b      	ldr	r3, [pc, #44]	@ (80024a4 <HAL_RCC_OscConfig+0x274>)
 8002478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0x234>
 8002482:	e01b      	b.n	80024bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002484:	4b09      	ldr	r3, [pc, #36]	@ (80024ac <HAL_RCC_OscConfig+0x27c>)
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248a:	f7ff f86f 	bl	800156c <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002490:	e00e      	b.n	80024b0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002492:	f7ff f86b 	bl	800156c <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d907      	bls.n	80024b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e15c      	b.n	800275e <HAL_RCC_OscConfig+0x52e>
 80024a4:	40023800 	.word	0x40023800
 80024a8:	42470000 	.word	0x42470000
 80024ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b0:	4b8a      	ldr	r3, [pc, #552]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 80024b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1ea      	bne.n	8002492 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 8097 	beq.w	80025f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ca:	2300      	movs	r3, #0
 80024cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ce:	4b83      	ldr	r3, [pc, #524]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10f      	bne.n	80024fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	4b7f      	ldr	r3, [pc, #508]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	4a7e      	ldr	r2, [pc, #504]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 80024e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ea:	4b7c      	ldr	r3, [pc, #496]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024f6:	2301      	movs	r3, #1
 80024f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fa:	4b79      	ldr	r3, [pc, #484]	@ (80026e0 <HAL_RCC_OscConfig+0x4b0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d118      	bne.n	8002538 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002506:	4b76      	ldr	r3, [pc, #472]	@ (80026e0 <HAL_RCC_OscConfig+0x4b0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a75      	ldr	r2, [pc, #468]	@ (80026e0 <HAL_RCC_OscConfig+0x4b0>)
 800250c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002512:	f7ff f82b 	bl	800156c <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800251a:	f7ff f827 	bl	800156c <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e118      	b.n	800275e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252c:	4b6c      	ldr	r3, [pc, #432]	@ (80026e0 <HAL_RCC_OscConfig+0x4b0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d106      	bne.n	800254e <HAL_RCC_OscConfig+0x31e>
 8002540:	4b66      	ldr	r3, [pc, #408]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002544:	4a65      	ldr	r2, [pc, #404]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6713      	str	r3, [r2, #112]	@ 0x70
 800254c:	e01c      	b.n	8002588 <HAL_RCC_OscConfig+0x358>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b05      	cmp	r3, #5
 8002554:	d10c      	bne.n	8002570 <HAL_RCC_OscConfig+0x340>
 8002556:	4b61      	ldr	r3, [pc, #388]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 8002558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255a:	4a60      	ldr	r2, [pc, #384]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 800255c:	f043 0304 	orr.w	r3, r3, #4
 8002560:	6713      	str	r3, [r2, #112]	@ 0x70
 8002562:	4b5e      	ldr	r3, [pc, #376]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 8002564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002566:	4a5d      	ldr	r2, [pc, #372]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6713      	str	r3, [r2, #112]	@ 0x70
 800256e:	e00b      	b.n	8002588 <HAL_RCC_OscConfig+0x358>
 8002570:	4b5a      	ldr	r3, [pc, #360]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002574:	4a59      	ldr	r2, [pc, #356]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 8002576:	f023 0301 	bic.w	r3, r3, #1
 800257a:	6713      	str	r3, [r2, #112]	@ 0x70
 800257c:	4b57      	ldr	r3, [pc, #348]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 800257e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002580:	4a56      	ldr	r2, [pc, #344]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 8002582:	f023 0304 	bic.w	r3, r3, #4
 8002586:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d015      	beq.n	80025bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002590:	f7fe ffec 	bl	800156c <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002596:	e00a      	b.n	80025ae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002598:	f7fe ffe8 	bl	800156c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e0d7      	b.n	800275e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ae:	4b4b      	ldr	r3, [pc, #300]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0ee      	beq.n	8002598 <HAL_RCC_OscConfig+0x368>
 80025ba:	e014      	b.n	80025e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025bc:	f7fe ffd6 	bl	800156c <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c2:	e00a      	b.n	80025da <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c4:	f7fe ffd2 	bl	800156c <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e0c1      	b.n	800275e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025da:	4b40      	ldr	r3, [pc, #256]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1ee      	bne.n	80025c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025e6:	7dfb      	ldrb	r3, [r7, #23]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d105      	bne.n	80025f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ec:	4b3b      	ldr	r3, [pc, #236]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 80025ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f0:	4a3a      	ldr	r2, [pc, #232]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 80025f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80ad 	beq.w	800275c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002602:	4b36      	ldr	r3, [pc, #216]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b08      	cmp	r3, #8
 800260c:	d060      	beq.n	80026d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d145      	bne.n	80026a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002616:	4b33      	ldr	r3, [pc, #204]	@ (80026e4 <HAL_RCC_OscConfig+0x4b4>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7fe ffa6 	bl	800156c <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002624:	f7fe ffa2 	bl	800156c <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e093      	b.n	800275e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	4b29      	ldr	r3, [pc, #164]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69da      	ldr	r2, [r3, #28]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	019b      	lsls	r3, r3, #6
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002658:	085b      	lsrs	r3, r3, #1
 800265a:	3b01      	subs	r3, #1
 800265c:	041b      	lsls	r3, r3, #16
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266c:	071b      	lsls	r3, r3, #28
 800266e:	491b      	ldr	r1, [pc, #108]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 8002670:	4313      	orrs	r3, r2
 8002672:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002674:	4b1b      	ldr	r3, [pc, #108]	@ (80026e4 <HAL_RCC_OscConfig+0x4b4>)
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7fe ff77 	bl	800156c <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002682:	f7fe ff73 	bl	800156c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e064      	b.n	800275e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002694:	4b11      	ldr	r3, [pc, #68]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x452>
 80026a0:	e05c      	b.n	800275c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a2:	4b10      	ldr	r3, [pc, #64]	@ (80026e4 <HAL_RCC_OscConfig+0x4b4>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7fe ff60 	bl	800156c <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b0:	f7fe ff5c 	bl	800156c <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e04d      	b.n	800275e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c2:	4b06      	ldr	r3, [pc, #24]	@ (80026dc <HAL_RCC_OscConfig+0x4ac>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x480>
 80026ce:	e045      	b.n	800275c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d107      	bne.n	80026e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e040      	b.n	800275e <HAL_RCC_OscConfig+0x52e>
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40007000 	.word	0x40007000
 80026e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002768 <HAL_RCC_OscConfig+0x538>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d030      	beq.n	8002758 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002700:	429a      	cmp	r2, r3
 8002702:	d129      	bne.n	8002758 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270e:	429a      	cmp	r2, r3
 8002710:	d122      	bne.n	8002758 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002718:	4013      	ands	r3, r2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800271e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002720:	4293      	cmp	r3, r2
 8002722:	d119      	bne.n	8002758 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272e:	085b      	lsrs	r3, r3, #1
 8002730:	3b01      	subs	r3, #1
 8002732:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002734:	429a      	cmp	r2, r3
 8002736:	d10f      	bne.n	8002758 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002742:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002744:	429a      	cmp	r2, r3
 8002746:	d107      	bne.n	8002758 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002754:	429a      	cmp	r2, r3
 8002756:	d001      	beq.n	800275c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800

0800276c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e041      	b.n	8002802 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7fe fe38 	bl	8001408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3304      	adds	r3, #4
 80027a8:	4619      	mov	r1, r3
 80027aa:	4610      	mov	r0, r2
 80027ac:	f000 f95e 	bl	8002a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b01      	cmp	r3, #1
 800281e:	d001      	beq.n	8002824 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e046      	b.n	80028b2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2202      	movs	r2, #2
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a23      	ldr	r2, [pc, #140]	@ (80028c0 <HAL_TIM_Base_Start+0xb4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d022      	beq.n	800287c <HAL_TIM_Base_Start+0x70>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800283e:	d01d      	beq.n	800287c <HAL_TIM_Base_Start+0x70>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1f      	ldr	r2, [pc, #124]	@ (80028c4 <HAL_TIM_Base_Start+0xb8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d018      	beq.n	800287c <HAL_TIM_Base_Start+0x70>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a1e      	ldr	r2, [pc, #120]	@ (80028c8 <HAL_TIM_Base_Start+0xbc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d013      	beq.n	800287c <HAL_TIM_Base_Start+0x70>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a1c      	ldr	r2, [pc, #112]	@ (80028cc <HAL_TIM_Base_Start+0xc0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00e      	beq.n	800287c <HAL_TIM_Base_Start+0x70>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1b      	ldr	r2, [pc, #108]	@ (80028d0 <HAL_TIM_Base_Start+0xc4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d009      	beq.n	800287c <HAL_TIM_Base_Start+0x70>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a19      	ldr	r2, [pc, #100]	@ (80028d4 <HAL_TIM_Base_Start+0xc8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d004      	beq.n	800287c <HAL_TIM_Base_Start+0x70>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a18      	ldr	r2, [pc, #96]	@ (80028d8 <HAL_TIM_Base_Start+0xcc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d111      	bne.n	80028a0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b06      	cmp	r3, #6
 800288c:	d010      	beq.n	80028b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289e:	e007      	b.n	80028b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40010000 	.word	0x40010000
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40000800 	.word	0x40000800
 80028cc:	40000c00 	.word	0x40000c00
 80028d0:	40010400 	.word	0x40010400
 80028d4:	40014000 	.word	0x40014000
 80028d8:	40001800 	.word	0x40001800

080028dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_TIM_ConfigClockSource+0x1c>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e0b4      	b.n	8002a62 <HAL_TIM_ConfigClockSource+0x186>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800291e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002930:	d03e      	beq.n	80029b0 <HAL_TIM_ConfigClockSource+0xd4>
 8002932:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002936:	f200 8087 	bhi.w	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 800293a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800293e:	f000 8086 	beq.w	8002a4e <HAL_TIM_ConfigClockSource+0x172>
 8002942:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002946:	d87f      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 8002948:	2b70      	cmp	r3, #112	@ 0x70
 800294a:	d01a      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0xa6>
 800294c:	2b70      	cmp	r3, #112	@ 0x70
 800294e:	d87b      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 8002950:	2b60      	cmp	r3, #96	@ 0x60
 8002952:	d050      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0x11a>
 8002954:	2b60      	cmp	r3, #96	@ 0x60
 8002956:	d877      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 8002958:	2b50      	cmp	r3, #80	@ 0x50
 800295a:	d03c      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0xfa>
 800295c:	2b50      	cmp	r3, #80	@ 0x50
 800295e:	d873      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 8002960:	2b40      	cmp	r3, #64	@ 0x40
 8002962:	d058      	beq.n	8002a16 <HAL_TIM_ConfigClockSource+0x13a>
 8002964:	2b40      	cmp	r3, #64	@ 0x40
 8002966:	d86f      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 8002968:	2b30      	cmp	r3, #48	@ 0x30
 800296a:	d064      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x15a>
 800296c:	2b30      	cmp	r3, #48	@ 0x30
 800296e:	d86b      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 8002970:	2b20      	cmp	r3, #32
 8002972:	d060      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x15a>
 8002974:	2b20      	cmp	r3, #32
 8002976:	d867      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
 8002978:	2b00      	cmp	r3, #0
 800297a:	d05c      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x15a>
 800297c:	2b10      	cmp	r3, #16
 800297e:	d05a      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x15a>
 8002980:	e062      	b.n	8002a48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002992:	f000 f98b 	bl	8002cac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	609a      	str	r2, [r3, #8]
      break;
 80029ae:	e04f      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029c0:	f000 f974 	bl	8002cac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029d2:	609a      	str	r2, [r3, #8]
      break;
 80029d4:	e03c      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029e2:	461a      	mov	r2, r3
 80029e4:	f000 f8e8 	bl	8002bb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2150      	movs	r1, #80	@ 0x50
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 f941 	bl	8002c76 <TIM_ITRx_SetConfig>
      break;
 80029f4:	e02c      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a02:	461a      	mov	r2, r3
 8002a04:	f000 f907 	bl	8002c16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2160      	movs	r1, #96	@ 0x60
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 f931 	bl	8002c76 <TIM_ITRx_SetConfig>
      break;
 8002a14:	e01c      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a22:	461a      	mov	r2, r3
 8002a24:	f000 f8c8 	bl	8002bb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2140      	movs	r1, #64	@ 0x40
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 f921 	bl	8002c76 <TIM_ITRx_SetConfig>
      break;
 8002a34:	e00c      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4610      	mov	r0, r2
 8002a42:	f000 f918 	bl	8002c76 <TIM_ITRx_SetConfig>
      break;
 8002a46:	e003      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a4c:	e000      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a43      	ldr	r2, [pc, #268]	@ (8002b8c <TIM_Base_SetConfig+0x120>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d013      	beq.n	8002aac <TIM_Base_SetConfig+0x40>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a8a:	d00f      	beq.n	8002aac <TIM_Base_SetConfig+0x40>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a40      	ldr	r2, [pc, #256]	@ (8002b90 <TIM_Base_SetConfig+0x124>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d00b      	beq.n	8002aac <TIM_Base_SetConfig+0x40>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a3f      	ldr	r2, [pc, #252]	@ (8002b94 <TIM_Base_SetConfig+0x128>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d007      	beq.n	8002aac <TIM_Base_SetConfig+0x40>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a3e      	ldr	r2, [pc, #248]	@ (8002b98 <TIM_Base_SetConfig+0x12c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d003      	beq.n	8002aac <TIM_Base_SetConfig+0x40>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a3d      	ldr	r2, [pc, #244]	@ (8002b9c <TIM_Base_SetConfig+0x130>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d108      	bne.n	8002abe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a32      	ldr	r2, [pc, #200]	@ (8002b8c <TIM_Base_SetConfig+0x120>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d02b      	beq.n	8002b1e <TIM_Base_SetConfig+0xb2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002acc:	d027      	beq.n	8002b1e <TIM_Base_SetConfig+0xb2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a2f      	ldr	r2, [pc, #188]	@ (8002b90 <TIM_Base_SetConfig+0x124>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d023      	beq.n	8002b1e <TIM_Base_SetConfig+0xb2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a2e      	ldr	r2, [pc, #184]	@ (8002b94 <TIM_Base_SetConfig+0x128>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d01f      	beq.n	8002b1e <TIM_Base_SetConfig+0xb2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a2d      	ldr	r2, [pc, #180]	@ (8002b98 <TIM_Base_SetConfig+0x12c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d01b      	beq.n	8002b1e <TIM_Base_SetConfig+0xb2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a2c      	ldr	r2, [pc, #176]	@ (8002b9c <TIM_Base_SetConfig+0x130>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d017      	beq.n	8002b1e <TIM_Base_SetConfig+0xb2>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a2b      	ldr	r2, [pc, #172]	@ (8002ba0 <TIM_Base_SetConfig+0x134>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d013      	beq.n	8002b1e <TIM_Base_SetConfig+0xb2>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a2a      	ldr	r2, [pc, #168]	@ (8002ba4 <TIM_Base_SetConfig+0x138>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00f      	beq.n	8002b1e <TIM_Base_SetConfig+0xb2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a29      	ldr	r2, [pc, #164]	@ (8002ba8 <TIM_Base_SetConfig+0x13c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d00b      	beq.n	8002b1e <TIM_Base_SetConfig+0xb2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a28      	ldr	r2, [pc, #160]	@ (8002bac <TIM_Base_SetConfig+0x140>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d007      	beq.n	8002b1e <TIM_Base_SetConfig+0xb2>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a27      	ldr	r2, [pc, #156]	@ (8002bb0 <TIM_Base_SetConfig+0x144>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d003      	beq.n	8002b1e <TIM_Base_SetConfig+0xb2>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a26      	ldr	r2, [pc, #152]	@ (8002bb4 <TIM_Base_SetConfig+0x148>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d108      	bne.n	8002b30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a0e      	ldr	r2, [pc, #56]	@ (8002b8c <TIM_Base_SetConfig+0x120>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d003      	beq.n	8002b5e <TIM_Base_SetConfig+0xf2>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a10      	ldr	r2, [pc, #64]	@ (8002b9c <TIM_Base_SetConfig+0x130>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d103      	bne.n	8002b66 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	691a      	ldr	r2, [r3, #16]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f043 0204 	orr.w	r2, r3, #4
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	601a      	str	r2, [r3, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40010000 	.word	0x40010000
 8002b90:	40000400 	.word	0x40000400
 8002b94:	40000800 	.word	0x40000800
 8002b98:	40000c00 	.word	0x40000c00
 8002b9c:	40010400 	.word	0x40010400
 8002ba0:	40014000 	.word	0x40014000
 8002ba4:	40014400 	.word	0x40014400
 8002ba8:	40014800 	.word	0x40014800
 8002bac:	40001800 	.word	0x40001800
 8002bb0:	40001c00 	.word	0x40001c00
 8002bb4:	40002000 	.word	0x40002000

08002bb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	f023 0201 	bic.w	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f023 030a 	bic.w	r3, r3, #10
 8002bf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	621a      	str	r2, [r3, #32]
}
 8002c0a:	bf00      	nop
 8002c0c:	371c      	adds	r7, #28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b087      	sub	sp, #28
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f023 0210 	bic.w	r2, r3, #16
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	031b      	lsls	r3, r3, #12
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	621a      	str	r2, [r3, #32]
}
 8002c6a:	bf00      	nop
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b085      	sub	sp, #20
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f043 0307 	orr.w	r3, r3, #7
 8002c98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	609a      	str	r2, [r3, #8]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	021a      	lsls	r2, r3, #8
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	609a      	str	r2, [r3, #8]
}
 8002ce0:	bf00      	nop
 8002ce2:	371c      	adds	r7, #28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e05a      	b.n	8002dba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a21      	ldr	r2, [pc, #132]	@ (8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d022      	beq.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d50:	d01d      	beq.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a1d      	ldr	r2, [pc, #116]	@ (8002dcc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d018      	beq.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a1b      	ldr	r2, [pc, #108]	@ (8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d013      	beq.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d00e      	beq.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a18      	ldr	r2, [pc, #96]	@ (8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d009      	beq.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a17      	ldr	r2, [pc, #92]	@ (8002ddc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d004      	beq.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a15      	ldr	r2, [pc, #84]	@ (8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d10c      	bne.n	8002da8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40010000 	.word	0x40010000
 8002dcc:	40000400 	.word	0x40000400
 8002dd0:	40000800 	.word	0x40000800
 8002dd4:	40000c00 	.word	0x40000c00
 8002dd8:	40010400 	.word	0x40010400
 8002ddc:	40014000 	.word	0x40014000
 8002de0:	40001800 	.word	0x40001800

08002de4 <memset>:
 8002de4:	4402      	add	r2, r0
 8002de6:	4603      	mov	r3, r0
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d100      	bne.n	8002dee <memset+0xa>
 8002dec:	4770      	bx	lr
 8002dee:	f803 1b01 	strb.w	r1, [r3], #1
 8002df2:	e7f9      	b.n	8002de8 <memset+0x4>

08002df4 <__libc_init_array>:
 8002df4:	b570      	push	{r4, r5, r6, lr}
 8002df6:	4d0d      	ldr	r5, [pc, #52]	@ (8002e2c <__libc_init_array+0x38>)
 8002df8:	4c0d      	ldr	r4, [pc, #52]	@ (8002e30 <__libc_init_array+0x3c>)
 8002dfa:	1b64      	subs	r4, r4, r5
 8002dfc:	10a4      	asrs	r4, r4, #2
 8002dfe:	2600      	movs	r6, #0
 8002e00:	42a6      	cmp	r6, r4
 8002e02:	d109      	bne.n	8002e18 <__libc_init_array+0x24>
 8002e04:	4d0b      	ldr	r5, [pc, #44]	@ (8002e34 <__libc_init_array+0x40>)
 8002e06:	4c0c      	ldr	r4, [pc, #48]	@ (8002e38 <__libc_init_array+0x44>)
 8002e08:	f000 f818 	bl	8002e3c <_init>
 8002e0c:	1b64      	subs	r4, r4, r5
 8002e0e:	10a4      	asrs	r4, r4, #2
 8002e10:	2600      	movs	r6, #0
 8002e12:	42a6      	cmp	r6, r4
 8002e14:	d105      	bne.n	8002e22 <__libc_init_array+0x2e>
 8002e16:	bd70      	pop	{r4, r5, r6, pc}
 8002e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e1c:	4798      	blx	r3
 8002e1e:	3601      	adds	r6, #1
 8002e20:	e7ee      	b.n	8002e00 <__libc_init_array+0xc>
 8002e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e26:	4798      	blx	r3
 8002e28:	3601      	adds	r6, #1
 8002e2a:	e7f2      	b.n	8002e12 <__libc_init_array+0x1e>
 8002e2c:	08003180 	.word	0x08003180
 8002e30:	08003180 	.word	0x08003180
 8002e34:	08003180 	.word	0x08003180
 8002e38:	08003184 	.word	0x08003184

08002e3c <_init>:
 8002e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e3e:	bf00      	nop
 8002e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e42:	bc08      	pop	{r3}
 8002e44:	469e      	mov	lr, r3
 8002e46:	4770      	bx	lr

08002e48 <_fini>:
 8002e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4a:	bf00      	nop
 8002e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e4e:	bc08      	pop	{r3}
 8002e50:	469e      	mov	lr, r3
 8002e52:	4770      	bx	lr
